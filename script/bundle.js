!function(e){var t={};function i(l){if(t[l])return t[l].exports;var s=t[l]={i:l,l:!1,exports:{}};return e[l].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=e,i.c=t,i.d=function(e,t,l){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:l})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var l=Object.create(null);if(i.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)i.d(l,s,function(t){return e[t]}.bind(null,s));return l},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}([function(e,t,i){"use strict";i.r(t);const l=e=>e[Math.floor(Math.random()*e.length)];var s=0,r=1,n=class{constructor(e,t,i,l,r,n){this.tileType=e,this.x=t,this.y=i,this.tileGridX=l,this.tileGridY=r,this.onTileSelect=n,this.image=null,this.state=s}create(e){this.image=e.add.image(this.x,this.y,this.tileType.imageKey),this.image.setInteractive(),this.image.on("pointerdown",()=>{this.onTileSelect(this)})}activate(){this.image.setTintFill(16777215)}deactivate(){this.image.clearTint()}updatePosition(e,t,i,l){this.x=e,this.y=t,this.tileGridX=i,this.tileGridY=l,this.image.x=e,this.image.y=t}destroy(){this.image.destroy(),this.state=r}},a=[{name:"Blue",imageKey:"tile_01"},{name:"Green",imageKey:"tile_02"},{name:"Red",imageKey:"tile_03"},{name:"Yellow",imageKey:"tile_04"}];const o={type:Phaser.AUTO,width:800,height:600,scene:{preload:function(){this.load.image("tile_01","assets/tile_01.png"),this.load.image("tile_02","assets/tile_02.png"),this.load.image("tile_03","assets/tile_03.png"),this.load.image("tile_04","assets/tile_04.png")},create:function(){h.create(this)},update:function(){h.update()}}},h=(new Phaser.Game(o),new class{constructor(e,t,i,s,r){this.offsetX=i,this.offsetY=s,this.tileHeight=t,this.tileWidth=e,this.tileGrid=[],this.onTileSelect=r;for(let i=0;i<t;i++){this.tileGrid[i]=[];for(let t=0;t<e;t++){const e=i<1?null:this.tileGrid[i-1][t],s=t<1?null:this.tileGrid[i][t-1],r=l(a.filter(t=>!(null!==e&&t.name===e.tileType.name||null!==s&&t.name===s.tileType.name)));this.tileGrid[i][t]=new n(r,this.offsetX+50*t,this.offsetY+50*i,t,i,this.onTileSelect)}}}create(e){this.forEachTile(t=>t.create(e))}update(){const e=this;e.getMatches().forEach(e=>e.destroy()),e.forEachTile((t,i,l)=>{e.tileGrid[l][i].state===r&&(e.tileGrid[l][i]=null)}),e.forEachTile((t,i,l)=>{l<e.tileHeight-1&&null===e.tileGrid[l+1][i]&&null!=e.tileGrid[l][i]&&(e.tileGrid[l+1][i]=t,t.updatePosition(e.offsetX+50*i,e.offsetY+50*(l+1),i,l+1),e.tileGrid[l][i]=null)})}swapTiles(e,t){let i=e.x,l=e.y,s=e.tileGridX,r=e.tileGridY,n=t.x,a=t.y,o=t.tileGridX,h=t.tileGridY;t.updatePosition(i,l,s,r),this.tileGrid[r][s]=t,e.updatePosition(n,a,o,h),this.tileGrid[h][o]=e}hasMatches(e,t){return this.getMatches(e,t).length>0}getMatches(e,t){const i=this,l=[];return i.forEachTile((s,r,n)=>{if(void 0!==e&&r!==e&&void 0!==t&&n!==t)return;const a=s.tileType,o=[],h=[];let d=r+1;for(;d<i.tileWidth;){const e=i.tileGrid[n][d];if(null==e||a.name!==e.tileType.name)break;o.push(e),d++}for(d=r-1;d>0;){const e=i.tileGrid[n][d];if(null==e||a.name!==e.tileType.name)break;o.push(e),d--}let u=n+1;for(;u<i.tileHeight;){const e=i.tileGrid[u][r];if(null==e||a.name!==e.tileType.name)break;h.push(e),u++}for(u=n-1;u>0;){const e=i.tileGrid[u][r];if(null==e||a!==e.tileType)break;h.push(e),u--}h.length>1&&l.push(...h),o.length>1&&l.push(...o),(h.length>1||o.length>1)&&l.push(s)}),l}forEachTile(e){for(let t=0;t<this.tileHeight;t++)for(let i=0;i<this.tileWidth;i++)null!=this.tileGrid[t][i]&&e(this.tileGrid[t][i],i,t)}}(10,10,50,50,function(e){if(0===d.length)return d.push(e),void e.activate();if(1===d.length){const t=d[0],i=Math.abs(t.tileGridX-e.tileGridX),l=Math.abs(t.tileGridY-e.tileGridY);(1===i&&0===l||0===i&&1===l)&&(d.push(e),h.swapTiles(...d),h.hasMatches(d[0].tileGridX,d[0].tileGridY)||h.hasMatches(d[1].tileGridX,d[1].tileGridY)||h.swapTiles(...d),d.forEach(e=>{e.deactivate()}),d=[])}}));let d=[]}]);
//# sourceMappingURL=bundle.js.map