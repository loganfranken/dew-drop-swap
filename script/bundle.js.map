{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./script/Utility.js","webpack:///./script/TileState.js","webpack:///./script/TileType.js","webpack:///./script/main.js","webpack:///./script/ActionQueue.js","webpack:///./script/TileGrid.js","webpack:///./script/Tile.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","getRandomItem","items","Math","floor","random","length","TileState","TileType","imageKey","config","type","Phaser","AUTO","width","height","scene","preload","this","load","image","tileGrid","update","main_queue","isActionRunning","hasActions","next","Game","[object Object]","queuedActions","currentAction","shift","action","self","push","then","selectedTiles","tileGridWidth","tileGridHeight","tileSize","offsetX","offsetY","onTileSelect","queue","tileImageContainer","playAreaOffset","y","x","aboveTile","leftTile","tileType","filter","createTile","context","add","container","forEachTile","tile","maskShape","make","graphics","fillStyle","fillRect","mask","Display","Masks","GeometryMask","matchedTiles","getMatches","destroys","forEach","destroy","Promise","all","bottomEmptyTiles","state","otherEmptyTile","find","e","drops","closestTile","closestTileY","currY","getTileDrop","firstTile","secondTile","firstTileX","firstTileY","firstTileGridX","tileGridX","firstTileGridY","tileGridY","secondTileX","secondTileY","secondTileGridX","secondTileGridY","firstSwap","updatePosition","secondSwap","targetGridX","targetGridY","targetTileType","matchedXTiles","matchedYTiles","currX","currTile","callback","setInteractive","on","setTintFill","clearTint","resolve","reject","tweens","targets","ease","duration","onComplete","alpha","remove","getTileX","getTileY","activate","selectedTile","xDiff","abs","yDiff","firstSelectedTile","secondSelectedTile","swapTiles","hasMatches","deactivate"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// Source: https://stackoverflow.com/questions/5915096/get-random-item-from-javascript-array\r\nconst getRandomItem = (items) => {\r\n    return items[Math.floor(Math.random() * items.length)];\r\n}\r\n\r\nexport {\r\n    getRandomItem\r\n}","export default {\r\n    Active: 0,\r\n    Destroyed: 1\r\n};","export default [\r\n    { name: 'Blue', imageKey: 'tile_01' },\r\n    { name: 'Green', imageKey: 'tile_02' },\r\n    { name: 'Red', imageKey: 'tile_03' },\r\n    { name: 'Yellow', imageKey: 'tile_04' }\r\n];","import TileGrid from './TileGrid';\r\nimport ActionQueue from './ActionQueue';\r\n\r\nconst config = {\r\n    type: Phaser.AUTO,\r\n    width: 800,\r\n    height: 600,\r\n    scene: {\r\n        preload: preload,\r\n        create: create,\r\n        update: update\r\n    }\r\n};\r\n\r\nconst game = new Phaser.Game(config);\r\nconst queue = new ActionQueue();\r\n\r\nlet selectedTiles = [];\r\nconst tileGrid = new TileGrid(10, 10, 50, 50, 50, onTileSelect, queue);\r\n\r\nfunction preload()\r\n{\r\n    this.load.image('tile_01', 'assets/tile_01.png');\r\n    this.load.image('tile_02', 'assets/tile_02.png');\r\n    this.load.image('tile_03', 'assets/tile_03.png');\r\n    this.load.image('tile_04', 'assets/tile_04.png');\r\n}\r\n\r\nfunction create()\r\n{\r\n    tileGrid.create(this);\r\n}\r\n\r\nfunction update()\r\n{\r\n    // Are we currently executing a queued action?\r\n    if(queue.isActionRunning())\r\n    {\r\n        return;\r\n    }\r\n\r\n    // Do we have any queued actions on the stack?\r\n    if(queue.hasActions())\r\n    {\r\n        queue.next();\r\n        return;\r\n    }\r\n\r\n    // If nothing's left in the queue, we can move the game's state forward\r\n    tileGrid.update(this);\r\n}\r\n\r\nfunction onTileSelect(context, tile) {\r\n\r\n    // Are we currently executing a queued action?\r\n    if(queue.isActionRunning())\r\n    {\r\n        return;\r\n    }\r\n\r\n    if(selectedTiles.length === 0)\r\n    {\r\n        selectedTiles.push(tile);\r\n        tile.activate();\r\n        return;\r\n    }\r\n\r\n    if(selectedTiles.length === 1)\r\n    {\r\n        const selectedTile = selectedTiles[0];\r\n        const xDiff = Math.abs(selectedTile.tileGridX - tile.tileGridX);\r\n        const yDiff = Math.abs(selectedTile.tileGridY - tile.tileGridY);\r\n\r\n        if((xDiff === 1 && yDiff === 0) || (xDiff === 0 && yDiff === 1))\r\n        {\r\n            selectedTiles.push(tile);\r\n\r\n            let firstSelectedTile = selectedTiles[0];\r\n            let secondSelectedTile = selectedTiles[1];\r\n\r\n            tileGrid.swapTiles(context, firstSelectedTile, secondSelectedTile);\r\n\r\n            queue.push(() => {\r\n\r\n                // If there are no matches, swap the tiles back\r\n                if(\r\n                    !tileGrid.hasMatches(firstSelectedTile.tileGridX, firstSelectedTile.tileGridY) &&\r\n                    !tileGrid.hasMatches(secondSelectedTile.tileGridX, secondSelectedTile.tileGridY)\r\n                )\r\n                {\r\n                    tileGrid.swapTiles(context, firstSelectedTile, secondSelectedTile);\r\n                }\r\n\r\n                return Promise.resolve();\r\n\r\n            });\r\n\r\n            selectedTiles.forEach((tile) => { tile.deactivate(); });\r\n            selectedTiles = [];\r\n        }\r\n    }\r\n\r\n}","export default class {\r\n\r\n    constructor()\r\n    {\r\n        this.queuedActions = [];\r\n        this.currentAction = null;\r\n    }\r\n\r\n    isActionRunning()\r\n    {\r\n        return this.currentAction != null;\r\n    }\r\n\r\n    hasActions()\r\n    {\r\n        return this.queuedActions.length > 0;\r\n    }\r\n\r\n    next()\r\n    {\r\n        this.currentAction = this.queuedActions.shift();\r\n        this.currentAction();\r\n    }\r\n\r\n    push(action)\r\n    {\r\n        var self = this;\r\n        self.queuedActions.push(() => { action().then(() => { self.currentAction = null; }) });\r\n    }\r\n\r\n}","import { getRandomItem } from './Utility';\r\nimport Tile from './Tile';\r\nimport TileType from './TileType';\r\nimport TileState from './TileState';\r\n\r\nexport default class {\r\n\r\n    constructor(tileGridWidth, tileGridHeight, tileSize, offsetX, offsetY, onTileSelect, queue)\r\n    {\r\n        this.offsetX = offsetX;\r\n        this.offsetY = offsetY;\r\n        this.tileSize = tileSize;\r\n        this.tileGridHeight = tileGridHeight;\r\n        this.tileGridWidth = tileGridWidth;\r\n        this.tileGrid = [];\r\n        this.tileImageContainer = null;\r\n        this.playAreaOffset = (this.tileGridHeight * this.tileSize);\r\n        this.onTileSelect = onTileSelect;\r\n        this.queue = queue;\r\n\r\n        // We're going to generate a grid that's twice the height of\r\n        // the desired tile grid height since we'll use the hidden, upper\r\n        // region to stage the bricks that will fall into the play area\r\n        for(let y = 0; y < tileGridHeight * 2; y++)\r\n        {\r\n            this.tileGrid[y] = [];\r\n            for(let x = 0; x < tileGridWidth; x++)\r\n            {\r\n                const aboveTile = (y < 1) ? null : this.tileGrid[y - 1][x];\r\n                const leftTile = (x < 1) ? null : this.tileGrid[y][x - 1];\r\n\r\n                const tileType = getRandomItem(TileType.filter(t =>\r\n                    (aboveTile === null || t.name !== aboveTile.tileType.name) &&\r\n                    (leftTile === null || t.name !== leftTile.tileType.name)\r\n                ));\r\n\r\n                this.tileGrid[y][x] = this.createTile(tileType, x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    create(context)\r\n    {\r\n        this.tileImageContainer = context.add.container();\r\n\r\n        // Create all of the tiles\r\n        this.forEachTile(tile => {\r\n            tile.create(context);\r\n            this.tileImageContainer.add(tile.image);\r\n        });\r\n\r\n        // Create a mask to only show the play area\r\n        const maskShape = context.make.graphics();\r\n        maskShape.fillStyle(0xffffff, 1);\r\n        maskShape.fillRect(this.offsetX/2, this.offsetY/2, this.tileGridWidth * this.tileSize, this.tileGridHeight * this.tileSize);\r\n        \r\n        this.tileImageContainer.mask = new Phaser.Display.Masks.GeometryMask(context, maskShape);\r\n    }\r\n\r\n    update(context)\r\n    {\r\n        const self = this;\r\n\r\n        // Detect and destroy any matches\r\n        const matchedTiles = self.getMatches();\r\n\r\n        let destroys = [];\r\n        matchedTiles.forEach(t => { destroys.push(t.destroy(context, this.tileImageContainer)); });\r\n\r\n        if(destroys.length > 0)\r\n        {\r\n            self.queue.push(() => { return Promise.all(destroys); });\r\n        }\r\n\r\n        // Remove any destroyed tiles\r\n        let bottomEmptyTiles = [];\r\n        self.forEachTile((tile, x, y) => {\r\n\r\n            if(self.tileGrid[y][x].state === TileState.Destroyed)\r\n            {\r\n                self.tileGrid[y][x] = null;\r\n\r\n                // Cache the bottom-most empty tiles\r\n                let otherEmptyTile = bottomEmptyTiles.find(e => e.x === x);\r\n                if(typeof otherEmptyTile === \"undefined\")\r\n                {\r\n                    bottomEmptyTiles.push({ x, y });\r\n                }\r\n                else\r\n                {\r\n                    otherEmptyTile.y = y;\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n        let drops = [];\r\n        bottomEmptyTiles.forEach(({x, y}) => {\r\n\r\n            // First, find the closest tile above this empty tile\r\n            let closestTile = null;\r\n            let closestTileY = y;\r\n\r\n            while(closestTileY >= 0)\r\n            {\r\n                closestTile = self.tileGrid[closestTileY][x];\r\n\r\n                if(closestTile != null)\r\n                {\r\n                    break;\r\n                }\r\n\r\n                closestTileY--;\r\n            }\r\n\r\n            // Second, set up that tile and all of the tiles above it for dropping\r\n            if(closestTile != null)\r\n            {\r\n                let currY = y;\r\n                while(closestTileY >= 0)\r\n                {\r\n                    if(closestTile === null)\r\n                    {\r\n                        currY--;\r\n                        closestTileY--;\r\n                        continue;\r\n                    }\r\n\r\n                    self.tileGrid[closestTileY][x] = null;\r\n                    self.tileGrid[currY][x] = closestTile;\r\n                    drops.push(this.getTileDrop(context, closestTile, x, currY));\r\n\r\n                    currY--;\r\n                    closestTileY--;\r\n\r\n                    if(closestTileY >= 0)\r\n                    {\r\n                        closestTile = self.tileGrid[closestTileY][x];\r\n                    }\r\n                }\r\n            }\r\n\r\n        });\r\n\r\n        if(drops.length > 0)\r\n        {\r\n            self.queue.push(() => { return Promise.all(drops); });\r\n        }\r\n    }\r\n\r\n    swapTiles(context, firstTile, secondTile)\r\n    {\r\n        let self = this;\r\n\r\n        self.queue.push(() => {\r\n            \r\n            let firstTileX = firstTile.x;\r\n            let firstTileY = firstTile.y;\r\n            let firstTileGridX = firstTile.tileGridX;\r\n            let firstTileGridY = firstTile.tileGridY;\r\n    \r\n            let secondTileX = secondTile.x;\r\n            let secondTileY = secondTile.y;\r\n            let secondTileGridX = secondTile.tileGridX;\r\n            let secondTileGridY = secondTile.tileGridY;\r\n    \r\n            let firstSwap = secondTile.updatePosition(context, firstTileX, firstTileY, firstTileGridX, firstTileGridY);\r\n            self.tileGrid[firstTileGridY][firstTileGridX] = secondTile;\r\n    \r\n            let secondSwap = firstTile.updatePosition(context, secondTileX, secondTileY, secondTileGridX, secondTileGridY);\r\n            self.tileGrid[secondTileGridY][secondTileGridX] = firstTile;\r\n\r\n            return Promise.all([firstSwap, secondSwap]);\r\n\r\n        });\r\n    }\r\n\r\n    hasMatches(targetGridX, targetGridY)\r\n    {\r\n        return this.getMatches(targetGridX, targetGridY).length > 0;\r\n    }\r\n\r\n    getMatches(targetGridX, targetGridY)\r\n    {\r\n        const self = this;\r\n        const matchedTiles = [];\r\n\r\n        self.forEachTile((tile, x, y) => {\r\n\r\n            if(\r\n                (typeof targetGridX !== 'undefined' && x !== targetGridX) &&\r\n                (typeof targetGridY !== 'undefined' && y !== targetGridY)\r\n              )\r\n            {\r\n                return;\r\n            }\r\n\r\n            const targetTileType = tile.tileType;\r\n            const matchedXTiles = [];\r\n            const matchedYTiles = [];\r\n\r\n            // Check for matches to the right\r\n            let currX = (x + 1);\r\n            while(currX < self.tileGridWidth)\r\n            {\r\n                const currTile = self.tileGrid[y][currX];\r\n\r\n                if(currTile != null && targetTileType.name === currTile.tileType.name)\r\n                {\r\n                    matchedXTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currX++;\r\n            }\r\n\r\n            // Check for matches to the left\r\n            currX = (x - 1);\r\n            while(currX > 0)\r\n            {\r\n                const currTile = self.tileGrid[y][currX];\r\n\r\n                if(currTile != null && targetTileType.name === currTile.tileType.name)\r\n                {\r\n                    matchedXTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currX--;\r\n            }\r\n\r\n            // Check matches downwards\r\n            let currY = (y + 1);\r\n            while(currY < self.tileGridHeight)\r\n            {\r\n                const currTile = self.tileGrid[currY][x];\r\n\r\n                if(currTile != null && targetTileType.name === currTile.tileType.name)\r\n                {\r\n                    matchedYTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currY++;\r\n            }\r\n\r\n            // Check matches upwards\r\n            currY = (y - 1);\r\n            while(currY > 0)\r\n            {\r\n                const currTile = self.tileGrid[currY][x];\r\n\r\n                if(currTile != null && targetTileType === currTile.tileType)\r\n                {\r\n                    matchedYTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currY--;\r\n            }\r\n            \r\n            if(matchedYTiles.length > 1)\r\n            {\r\n                matchedTiles.push(...matchedYTiles);\r\n            }\r\n            \r\n            if(matchedXTiles.length > 1)\r\n            {\r\n                matchedTiles.push(...matchedXTiles);\r\n            }\r\n\r\n            if(matchedYTiles.length > 1 || matchedXTiles.length > 1)\r\n            {\r\n                matchedTiles.push(tile);\r\n            }\r\n        });\r\n\r\n        return matchedTiles;\r\n    }\r\n\r\n    forEachTile(callback)\r\n    {\r\n        for(let y = 0; y < this.tileGridHeight * 2; y++)\r\n        {\r\n            for(let x = 0; x < this.tileGridWidth; x++)\r\n            {\r\n                const currTile = this.tileGrid[y][x];\r\n\r\n                if(currTile != null)\r\n                {\r\n                    callback(this.tileGrid[y][x], x, y);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    createTile(tileType, x, y)\r\n    {\r\n        return new Tile(tileType, this.getTileX(x), this.getTileY(y), x, y, this.onTileSelect);\r\n    }\r\n\r\n    getTileDrop(context, tile, x, y)\r\n    {\r\n        return tile.updatePosition(context, this.getTileX(x), this.getTileY(y), x, y);\r\n    }\r\n\r\n    getTileX(x)\r\n    {\r\n        return this.offsetX + (this.tileSize * x);\r\n    }\r\n\r\n    getTileY(y)\r\n    {\r\n        return this.offsetY + (this.tileSize * y) - this.playAreaOffset;\r\n    }\r\n}","import TileState from './TileState';\r\n\r\nexport default class {\r\n\r\n    constructor(tileType, x, y, tileGridX, tileGridY, onTileSelect)\r\n    {\r\n        this.tileType = tileType;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.tileGridX = tileGridX;\r\n        this.tileGridY = tileGridY;\r\n        this.onTileSelect = onTileSelect;\r\n        this.image = null;\r\n        this.state = TileState.Active;\r\n    }\r\n\r\n    create(context)\r\n    {\r\n        this.image = context.add.image(this.x, this.y, this.tileType.imageKey);\r\n        this.image.setInteractive();\r\n        this.image.on('pointerdown', () => { this.onTileSelect(context, this); });\r\n    }\r\n\r\n    activate()\r\n    {\r\n        this.image.setTintFill(0xffffff);\r\n    }\r\n\r\n    deactivate()\r\n    {\r\n        this.image.clearTint();\r\n    }\r\n\r\n    updatePosition(context, x, y, tileGridX, tileGridY)\r\n    {\r\n        let self = this;\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            self.x = x;\r\n            self.y = y;\r\n            self.tileGridX = tileGridX;\r\n            self.tileGridY = tileGridY;\r\n\r\n            context.tweens.add({\r\n                targets: self.image,\r\n                x: x,\r\n                y: y,\r\n                ease: 'Power1',\r\n                duration: 500,\r\n                onComplete: () => { resolve() }\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    destroy(context, container)\r\n    {\r\n        let self = this;\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            context.tweens.add({\r\n                targets: self.image,\r\n                alpha: 0,\r\n                ease: 'Power1',\r\n                duration: 500,\r\n                onComplete: () => {\r\n\r\n                    container.remove(self.image);\r\n                    self.image.destroy();\r\n                    self.state = TileState.Destroyed;\r\n                    resolve();\r\n\r\n                }\r\n            });\r\n\r\n        });\r\n    }\r\n}"],"sourceRoot":""}