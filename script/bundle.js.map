{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./script/scenes/TitleScene.js","webpack:///./script/Utility.js","webpack:///./script/TileState.js","webpack:///./script/TileGenerationBehavior.js","webpack:///./script/TileType.js","webpack:///./script/scenes/RoundScene.js","webpack:///./script/ActionQueue.js","webpack:///./script/TileGrid.js","webpack:///./script/Tile.js","webpack:///./script/ScoreDisplay.js","webpack:///./script/Timer.js","webpack:///./script/Guide.js","webpack:///./script/scenes/GameOverScene.js","webpack:///./script/main.js"],"names":["enumerable","get","getter","value","key","bind","module","Object","prototype","hasOwnProperty","call","object","property","super","self","this","add","text","startBtn","setInteractive","on","scene","start","level","getRandomItem","items","Math","floor","random","length","name","imageKey","score","queue","selectedTiles","tileGrid","scoreDisplay","timer","comboCount","guide","load","image","data","queuedActions","currentAction","shift","action","push","then","tileGridWidth","tileGridHeight","tileSize","offsetX","offsetY","onTileSelect","onTileMatch","tileImageContainer","playAreaOffset","tileGenerationBehavior","TileGenerationBehavior","y","x","createTile","getTileType","context","container","forEachTile","tile","create","maskShape","make","graphics","fillStyle","fillRect","mask","Phaser","Display","Masks","GeometryMask","matchedTiles","getMatches","destroys","forEach","t","destroy","Promise","all","state","TileState","drops","closestY","closestTile","getTileDrop","forEachPlayableTile","adjustedY","firstTile","secondTile","firstTileX","firstTileY","firstTileGridX","tileGridX","firstTileGridY","tileGridY","secondTileX","secondTileY","secondTileGridX","secondTileGridY","firstSwap","updatePosition","secondSwap","targetGridX","targetGridY","isPlayable","targetTileType","tileType","matchedXTiles","matchedYTiles","currX","currTile","currY","callback","isActivated","setTintFill","clearTint","resolve","reject","tweens","targets","ease","duration","onComplete","alpha","remove","getTileX","getTileY","behavior","aboveTile","belowTile","leftTile","rightTile","TileType","filter","map","scoreText","comboText","setText","seconds","tick","time","addEvent","delay","callbackScope","loop","minutes","messageTimer","currMessageIndex","queuedMessages","speechBubbleGraphics","color","speechBubble","Geom","Rectangle","fillRectShape","input","pointer","contains","paused","speechBubbleText","characterGraphics","character","messages","currMessage","message","slice","queueMessages","isActionRunning","hasActions","next","update","canSelect","deactivate","activate","selectedTile","xDiff","abs","yDiff","firstSelectedTile","secondSelectedTile","swapTiles","hasMatches","updateScore","updateMessage","updateCombo","finalScore","startOverBtn","config","type","AUTO","width","height","TitleScene","RoundScene","GameOverScene","Game"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default class extends Phaser.Scene {\r\n\r\n    constructor()\r\n    {\r\n        super('TitleScene');\r\n    }\r\n\r\n    create()\r\n    {\r\n        const self = this;\r\n\r\n        // Title\r\n        this.add.text(50, 50, 'Match Three!');\r\n\r\n        // \"Start\" Button\r\n        const startBtn = this.add.text(50, 70, 'Start Game');\r\n        startBtn.setInteractive();\r\n        startBtn.on('pointerdown', () => { self.scene.start('RoundScene', { level: 0 }); });\r\n    }\r\n    \r\n}","// Source: https://stackoverflow.com/questions/5915096/get-random-item-from-javascript-array\r\nconst getRandomItem = (items) => {\r\n    return items[Math.floor(Math.random() * items.length)];\r\n}\r\n\r\nexport {\r\n    getRandomItem\r\n}","export default {\r\n    Active: 0,\r\n    Destroyed: 1\r\n};","export default {\r\n    None: 0,\r\n    EasyWin: 1\r\n};","export default [\r\n    { name: 'Blue', imageKey: 'tile_01' },\r\n    { name: 'Green', imageKey: 'tile_02' },\r\n    { name: 'Red', imageKey: 'tile_03' },\r\n    { name: 'Yellow', imageKey: 'tile_04' }\r\n];","import ActionQueue from '../ActionQueue';\r\nimport Guide from '../Guide';\r\nimport ScoreDisplay from '../ScoreDisplay';\r\nimport TileGrid from '../TileGrid';\r\nimport Timer from '../Timer';\r\n\r\nexport default class extends Phaser.Scene {\r\n\r\n    constructor()\r\n    {\r\n        super('RoundScene');\r\n\r\n        this.score = null;\r\n        this.queue = null;\r\n        this.selectedTiles = null;\r\n        this.tileGrid = null;\r\n        this.scoreDisplay = null;\r\n        this.timer = null;\r\n        this.comboCount = null;\r\n        this.guide = null;\r\n        this.level = null;\r\n    }\r\n\r\n    preload()\r\n    {\r\n        this.load.image('tile_01', 'assets/tile_01.png');\r\n        this.load.image('tile_02', 'assets/tile_02.png');\r\n        this.load.image('tile_03', 'assets/tile_03.png');\r\n        this.load.image('tile_04', 'assets/tile_04.png');\r\n    }\r\n\r\n    init(data)\r\n    {\r\n        this.level = data.level;\r\n    }\r\n\r\n    create()\r\n    {\r\n        this.score = 0;\r\n        this.comboCount = 0;\r\n\r\n        this.queue = new ActionQueue();\r\n\r\n        this.selectedTiles = [];\r\n        this.tileGrid = new TileGrid(6, 6, 50, 50, 50, this.onTileSelect, this.onTileMatch, this.queue);\r\n        this.scoreDisplay = new ScoreDisplay(5, 5);\r\n        this.timer = new Timer(500, 5, 300);\r\n        this.guide = new Guide(100, 100, this.level);\r\n\r\n        this.tileGrid.create(this);\r\n        this.scoreDisplay.create(this);\r\n        this.timer.create(this);\r\n        this.guide.create(this);\r\n\r\n        if(this.level === 0)\r\n        {\r\n            this.guide.queueMessages(this,\r\n                [\r\n                    \"Oh, doozle, you made it! You're here!\",\r\n                    \"We need your help collecting dew drops!\",\r\n                    \"If you match three or more dew drops of the same color, we can collect them!\",\r\n                    \"To make a match, click on one or more dew drops to swap their places!\"\r\n                ]\r\n            );\r\n        }\r\n    }\r\n\r\n    update()\r\n    {\r\n        // Have we run out of time?\r\n        if(this.timer.seconds <= 0)\r\n        {\r\n            this.scene.start('GameOverScene', { score: this.score });\r\n            return;\r\n        }\r\n\r\n        // Are we currently executing a queued action?\r\n        if(this.queue.isActionRunning())\r\n        {\r\n            return;\r\n        }\r\n\r\n        // Do we have any queued actions on the stack?\r\n        if(this.queue.hasActions())\r\n        {\r\n            this.queue.next();\r\n            return;\r\n        }\r\n\r\n        // If nothing's left in the queue, we can move the game's state forward\r\n        this.tileGrid.update(this);\r\n    }\r\n\r\n    onTileSelect(context, tile)\r\n    {\r\n        // Are we currently executing a queued action?\r\n        if(context.queue.isActionRunning())\r\n        {\r\n            return;\r\n        }\r\n    \r\n        // Can we select this tile?\r\n        if(!context.tileGrid.canSelect(tile))\r\n        {\r\n            return;\r\n        }\r\n\r\n        // Is this tile already selected?\r\n        if(tile.isActivated)\r\n        {\r\n            context.selectedTiles = [];\r\n            tile.deactivate();\r\n            return;\r\n        }\r\n    \r\n        if(context.selectedTiles.length === 0)\r\n        {\r\n            context.selectedTiles.push(tile);\r\n            tile.activate();\r\n            return;\r\n        }\r\n    \r\n        if(context.selectedTiles.length === 1)\r\n        {\r\n            const selectedTile = context.selectedTiles[0];\r\n            const xDiff = Math.abs(selectedTile.tileGridX - tile.tileGridX);\r\n            const yDiff = Math.abs(selectedTile.tileGridY - tile.tileGridY);\r\n    \r\n            if((xDiff === 1 && yDiff === 0) || (xDiff === 0 && yDiff === 1))\r\n            {\r\n                context.selectedTiles.push(tile);\r\n    \r\n                let firstSelectedTile = context.selectedTiles[0];\r\n                let secondSelectedTile = context.selectedTiles[1];\r\n    \r\n                context.tileGrid.swapTiles(context, firstSelectedTile, secondSelectedTile);\r\n    \r\n                context.queue.push(() => {\r\n    \r\n                    // If there are no matches, swap the tiles back\r\n                    if(\r\n                        !context.tileGrid.hasMatches(firstSelectedTile.tileGridX, firstSelectedTile.tileGridY) &&\r\n                        !context.tileGrid.hasMatches(secondSelectedTile.tileGridX, secondSelectedTile.tileGridY)\r\n                    )\r\n                    {\r\n                        context.tileGrid.swapTiles(context, firstSelectedTile, secondSelectedTile);\r\n                    }\r\n    \r\n                    return Promise.resolve();\r\n    \r\n                });\r\n    \r\n                context.selectedTiles.forEach((tile) => { tile.deactivate(); });\r\n                context.selectedTiles = [];\r\n                \r\n                context.comboCount = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    onTileMatch(context, matchedTiles)\r\n    {\r\n        context.comboCount++;\r\n\r\n        context.score += (10 * context.comboCount);\r\n        context.scoreDisplay.updateScore(context.score);\r\n\r\n        if(context.comboCount > 1)\r\n        {\r\n            context.guide.updateMessage(`That's ${context.comboCount} combos!`);\r\n            context.scoreDisplay.updateCombo(`${context.comboCount}x multiplier!`);\r\n        }\r\n        else\r\n        {\r\n            context.guide.updateMessage('You got a match!');\r\n            context.scoreDisplay.updateCombo('');\r\n        }\r\n    }\r\n    \r\n}","export default class {\r\n\r\n    constructor()\r\n    {\r\n        this.queuedActions = [];\r\n        this.currentAction = null;\r\n    }\r\n\r\n    isActionRunning()\r\n    {\r\n        return this.currentAction != null;\r\n    }\r\n\r\n    hasActions()\r\n    {\r\n        return this.queuedActions.length > 0;\r\n    }\r\n\r\n    next()\r\n    {\r\n        this.currentAction = this.queuedActions.shift();\r\n        this.currentAction();\r\n    }\r\n\r\n    push(action)\r\n    {\r\n        var self = this;\r\n        self.queuedActions.push(() => { action().then(() => { self.currentAction = null; }) });\r\n    }\r\n\r\n}","import { getRandomItem } from './Utility';\r\nimport Tile from './Tile';\r\nimport TileGenerationBehavior from './TileGenerationBehavior';\r\nimport TileState from './TileState';\r\nimport TileType from './TileType';\r\n\r\nexport default class {\r\n\r\n    constructor(tileGridWidth, tileGridHeight, tileSize, offsetX, offsetY, onTileSelect, onTileMatch, queue)\r\n    {\r\n        this.offsetX = offsetX;\r\n        this.offsetY = offsetY;\r\n        this.tileSize = tileSize;\r\n        this.tileGridHeight = tileGridHeight;\r\n        this.tileGridWidth = tileGridWidth;\r\n        this.tileGrid = [];\r\n        this.tileImageContainer = null;\r\n        this.playAreaOffset = (this.tileGridHeight * this.tileSize);\r\n\r\n        this.onTileSelect = onTileSelect;\r\n        this.onTileMatch = onTileMatch;\r\n\r\n        this.tileGenerationBehavior = TileGenerationBehavior.None;\r\n\r\n        this.queue = queue;\r\n\r\n        // We're going to generate a grid that's twice the height of\r\n        // the desired tile grid height since we'll use the hidden, upper\r\n        // region to stage the bricks that will fall into the play area\r\n        for(let y = 0; y < tileGridHeight * 2; y++)\r\n        {\r\n            this.tileGrid[y] = [];\r\n            for(let x = 0; x < tileGridWidth; x++)\r\n            {\r\n                this.tileGrid[y][x] = (y < tileGridHeight)\r\n                    ? null\r\n                    : this.createTile(this.getTileType(x, y, this.tileGenerationBehavior), x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    create(context)\r\n    {\r\n        this.tileImageContainer = context.add.container();\r\n\r\n        // Create all of the tiles\r\n        this.forEachTile(tile => {\r\n\r\n            if(tile === null)\r\n            {\r\n                return;\r\n            }\r\n\r\n            tile.create(context);\r\n            this.tileImageContainer.add(tile.image);\r\n\r\n        });\r\n\r\n        // Create a mask to only show the play area\r\n        const maskShape = context.make.graphics();\r\n        maskShape.fillStyle(0xffffff, 1);\r\n        maskShape.fillRect(this.offsetX/2, this.offsetY/2 + (this.tileGridHeight * this.tileSize), this.tileGridWidth * this.tileSize, this.tileGridHeight * this.tileSize);\r\n        \r\n        this.tileImageContainer.mask = new Phaser.Display.Masks.GeometryMask(context, maskShape);\r\n    }\r\n\r\n    update(context)\r\n    {\r\n        const self = this;\r\n\r\n        if(self.queue.length > 0)\r\n        {\r\n            return;\r\n        }\r\n\r\n        // Detect and destroy any matches\r\n        const matchedTiles = self.getMatches();\r\n\r\n        if(matchedTiles.length > 0)\r\n        {\r\n            self.onTileMatch(context, matchedTiles);\r\n        }\r\n\r\n        let destroys = [];\r\n        matchedTiles.forEach(t => { destroys.push(t.destroy(context, this.tileImageContainer)); });\r\n\r\n        if(destroys.length > 0)\r\n        {\r\n            self.queue.push(() => { return Promise.all(destroys); });\r\n        }\r\n\r\n        // Remove any destroyed tiles\r\n        self.forEachTile((tile, x, y) => {\r\n\r\n            if(tile === null)\r\n            {\r\n                return;\r\n            }\r\n\r\n            if(tile.state === TileState.Destroyed)\r\n            {\r\n                self.tileGrid[y][x] = null;\r\n            }\r\n\r\n        });\r\n\r\n        // Shift all of the tiles downward to fill empty spots\r\n        let drops = [];\r\n        for(let x = 0; x < this.tileGridWidth; x++)\r\n        {\r\n            let y = (this.tileGridHeight * 2) - 1;\r\n            while(y >= 0)\r\n            {\r\n                // If the tile is null...\r\n                if(self.tileGrid[y][x] === null)\r\n                {\r\n                    // ...find the closest tile that's not null...\r\n                    let closestY = y - 1;\r\n                    while(closestY >= 0)\r\n                    {\r\n                        let closestTile = self.tileGrid[closestY][x];\r\n                        if(closestTile !== null)\r\n                        {\r\n                            // ...and shift it downward\r\n                            self.tileGrid[y][x] = closestTile;\r\n                            self.tileGrid[closestY][x] = null;\r\n                            drops.push(this.getTileDrop(context, closestTile, x, y));\r\n                            y--;\r\n                        }\r\n                        closestY--;\r\n                    }\r\n                }\r\n\r\n                y--;\r\n            }\r\n        }\r\n\r\n        // Fill in all of the empty tiles\r\n        self.forEachPlayableTile((tile, x, y) => {\r\n            if(tile === null)\r\n            {\r\n                const adjustedY = y - self.tileGridHeight;\r\n\r\n                const tile = self.createTile(self.getTileType(x, y, self.tileGenerationBehavior), x, adjustedY);\r\n                self.tileGrid[adjustedY][x] = tile;\r\n                tile.create(context);\r\n                self.tileImageContainer.add(tile.image);\r\n            }\r\n        });\r\n\r\n        if(drops.length > 0)\r\n        {\r\n            self.queue.push(() => { return Promise.all(drops); });\r\n        }\r\n    }\r\n\r\n    swapTiles(context, firstTile, secondTile)\r\n    {\r\n        let self = this;\r\n\r\n        self.queue.push(() => {\r\n            \r\n            let firstTileX = firstTile.x;\r\n            let firstTileY = firstTile.y;\r\n            let firstTileGridX = firstTile.tileGridX;\r\n            let firstTileGridY = firstTile.tileGridY;\r\n    \r\n            let secondTileX = secondTile.x;\r\n            let secondTileY = secondTile.y;\r\n            let secondTileGridX = secondTile.tileGridX;\r\n            let secondTileGridY = secondTile.tileGridY;\r\n    \r\n            let firstSwap = secondTile.updatePosition(context, firstTileX, firstTileY, firstTileGridX, firstTileGridY);\r\n            self.tileGrid[firstTileGridY][firstTileGridX] = secondTile;\r\n    \r\n            let secondSwap = firstTile.updatePosition(context, secondTileX, secondTileY, secondTileGridX, secondTileGridY);\r\n            self.tileGrid[secondTileGridY][secondTileGridX] = firstTile;\r\n\r\n            return Promise.all([firstSwap, secondSwap]);\r\n\r\n        });\r\n    }\r\n\r\n    hasMatches(targetGridX, targetGridY)\r\n    {\r\n        return this.getMatches(targetGridX, targetGridY).length > 0;\r\n    }\r\n\r\n    getMatches(targetGridX, targetGridY)\r\n    {\r\n        const self = this;\r\n        const matchedTiles = [];\r\n\r\n        self.forEachTile((tile, x, y) => {\r\n\r\n            if(\r\n                (typeof targetGridX !== 'undefined' && x !== targetGridX) &&\r\n                (typeof targetGridY !== 'undefined' && y !== targetGridY)\r\n              )\r\n            {\r\n                return;\r\n            }\r\n\r\n            if(!this.isPlayable(tile))\r\n            {\r\n                return;\r\n            }\r\n\r\n            const targetTileType = tile.tileType;\r\n            const matchedXTiles = [];\r\n            const matchedYTiles = [];\r\n\r\n            // Check for matches to the right\r\n            let currX = (x + 1);\r\n            while(currX < self.tileGridWidth)\r\n            {\r\n                const currTile = self.tileGrid[y][currX];\r\n\r\n                if(currTile != null && targetTileType.name === currTile.tileType.name)\r\n                {\r\n                    matchedXTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currX++;\r\n            }\r\n\r\n            // Check for matches to the left\r\n            currX = (x - 1);\r\n            while(currX > 0)\r\n            {\r\n                const currTile = self.tileGrid[y][currX];\r\n\r\n                if(currTile != null && targetTileType.name === currTile.tileType.name)\r\n                {\r\n                    matchedXTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currX--;\r\n            }\r\n\r\n            // Check matches downwards\r\n            let currY = (y + 1);\r\n            while(currY < self.tileGridHeight)\r\n            {\r\n                const currTile = self.tileGrid[currY][x];\r\n\r\n                if(currTile != null && targetTileType.name === currTile.tileType.name)\r\n                {\r\n                    matchedYTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currY++;\r\n            }\r\n\r\n            // Check matches upwards\r\n            currY = (y - 1);\r\n            while(currY > 0)\r\n            {\r\n                const currTile = self.tileGrid[currY][x];\r\n\r\n                if(currTile != null && targetTileType === currTile.tileType)\r\n                {\r\n                    matchedYTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currY--;\r\n            }\r\n            \r\n            if(matchedYTiles.length > 1)\r\n            {\r\n                matchedTiles.push(...matchedYTiles);\r\n            }\r\n            \r\n            if(matchedXTiles.length > 1)\r\n            {\r\n                matchedTiles.push(...matchedXTiles);\r\n            }\r\n\r\n            if(matchedYTiles.length > 1 || matchedXTiles.length > 1)\r\n            {\r\n                matchedTiles.push(tile);\r\n            }\r\n        });\r\n\r\n        return matchedTiles;\r\n    }\r\n\r\n    forEachTile(callback)\r\n    {\r\n        for(let y = 0; y < this.tileGridHeight * 2; y++)\r\n        {\r\n            for(let x = 0; x < this.tileGridWidth; x++)\r\n            {\r\n                callback(this.tileGrid[y][x], x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    forEachPlayableTile(callback)\r\n    {\r\n        for(let y = this.tileGridHeight; y < this.tileGridHeight * 2; y++)\r\n        {\r\n            for(let x = 0; x < this.tileGridWidth; x++)\r\n            {\r\n                callback(this.tileGrid[y][x], x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    createTile(tileType, x, y)\r\n    {\r\n        return new Tile(tileType, this.getTileX(x), this.getTileY(y), x, y, this.onTileSelect);\r\n    }\r\n\r\n    getTileDrop(context, tile, x, y)\r\n    {\r\n        return tile.updatePosition(context, this.getTileX(x), this.getTileY(y), x, y);\r\n    }\r\n\r\n    getTileX(x)\r\n    {\r\n        return this.offsetX + (this.tileSize * x);\r\n    }\r\n\r\n    getTileY(y)\r\n    {\r\n        return this.offsetY + (this.tileSize * y);\r\n    }\r\n\r\n    canSelect(tile)\r\n    {\r\n        return this.isPlayable(tile);\r\n    }\r\n\r\n    isPlayable(tile)\r\n    {\r\n        return (tile != null) && (tile.tileGridY > (this.tileGridHeight - 1));\r\n    }\r\n\r\n    getTileType(x, y, behavior)\r\n    {\r\n        const aboveTile = (y < 1) ? null : this.tileGrid[y - 1][x];\r\n        const belowTile = (y > self.tileGridHeight - 1 || !this.tileGrid[y + 1]) ? null : this.tileGrid[y + 1][x];\r\n\r\n        const leftTile = (x < 1) ? null : this.tileGrid[y][x - 1];\r\n        const rightTile = (x > self.tileGridWidth - 1) ? null : this.tileGrid[y][x + 1];\r\n\r\n        if(behavior == TileGenerationBehavior.EasyWin && (aboveTile != null || belowTile != null || leftTile != null || rightTile != null))\r\n        {\r\n            return getRandomItem([aboveTile, belowTile, leftTile, rightTile].filter(t => t != null).map(t => t.tileType));\r\n        }\r\n        else\r\n        {\r\n            return getRandomItem(TileType.filter(t =>\r\n                (aboveTile === null || t.name !== aboveTile.tileType.name) &&\r\n                (leftTile === null || t.name !== leftTile.tileType.name)\r\n            ));\r\n        }\r\n    }\r\n}","import TileState from './TileState';\r\n\r\nexport default class {\r\n\r\n    constructor(tileType, x, y, tileGridX, tileGridY, onTileSelect)\r\n    {\r\n        this.tileType = tileType;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.tileGridX = tileGridX;\r\n        this.tileGridY = tileGridY;\r\n        this.onTileSelect = onTileSelect;\r\n        this.image = null;\r\n        this.state = TileState.Active;\r\n        this.isActivated = false;\r\n    }\r\n\r\n    create(context)\r\n    {\r\n        this.image = context.add.image(this.x, this.y, this.tileType.imageKey);\r\n        this.image.setInteractive();\r\n        this.image.on('pointerdown', () => { this.onTileSelect(context, this); });\r\n    }\r\n\r\n    activate()\r\n    {\r\n        this.isActivated = true;\r\n        this.image.setTintFill(0xffffff);\r\n    }\r\n\r\n    deactivate()\r\n    {\r\n        this.isActivated = false;\r\n        this.image.clearTint();\r\n    }\r\n\r\n    updatePosition(context, x, y, tileGridX, tileGridY)\r\n    {\r\n        let self = this;\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            self.x = x;\r\n            self.y = y;\r\n            self.tileGridX = tileGridX;\r\n            self.tileGridY = tileGridY;\r\n\r\n            context.tweens.add({\r\n                targets: self.image,\r\n                x: x,\r\n                y: y,\r\n                ease: 'Power1',\r\n                duration: 500,\r\n                onComplete: () => { resolve() }\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    destroy(context, container)\r\n    {\r\n        let self = this;\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            context.tweens.add({\r\n                targets: self.image,\r\n                alpha: 0,\r\n                ease: 'Power1',\r\n                duration: 500,\r\n                onComplete: () => {\r\n\r\n                    container.remove(self.image);\r\n                    self.image.destroy();\r\n                    self.state = TileState.Destroyed;\r\n                    resolve();\r\n\r\n                }\r\n            });\r\n\r\n        });\r\n    }\r\n}","export default class {\r\n\r\n    constructor(x, y)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.scoreText = null;\r\n        this.comboText = null;\r\n        this.score = 0;\r\n    }\r\n\r\n    create(context)\r\n    {\r\n        this.scoreText = context.add.text(this.x, this.y, this.score);\r\n        this.comboText = context.add.text(this.x, this.y + 20, '');\r\n    }\r\n\r\n    updateScore(score)\r\n    {\r\n        this.score = score;\r\n        this.scoreText.setText(score);\r\n    }\r\n\r\n    updateCombo(text)\r\n    {\r\n        this.comboText.setText(text);\r\n    }\r\n}","export default class {\r\n\r\n    constructor(x, y, seconds)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.text = null;\r\n        this.seconds = seconds;\r\n    }\r\n\r\n    create(context)\r\n    {\r\n        this.text = context.add.text(this.x, this.y, this.score);\r\n        \r\n        this.tick();\r\n        context.time.addEvent({ delay: 1000, callback: this.tick, callbackScope: this, loop: true })\r\n    }\r\n\r\n    tick()\r\n    {\r\n        if(this.seconds <= 0)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.seconds--;\r\n\r\n        // Display the remaining time\r\n        const minutes = Math.floor(this.seconds / 60);\r\n\r\n        let seconds = (this.seconds % 60);\r\n        if(seconds < 10)\r\n        {\r\n            seconds = '0' + seconds;\r\n        }\r\n\r\n        this.text.setText(`${minutes}:${seconds}`);\r\n    }\r\n}","export default class {\r\n\r\n    constructor(x, y)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        this.messageTimer = null;\r\n        this.currMessageIndex = 0;\r\n        this.queuedMessages = null;\r\n    }\r\n\r\n    create(context)\r\n    {\r\n        const self = this;\r\n\r\n        const speechBubbleWidth = 500;\r\n        const speechBubbleHeight = 100;\r\n        \r\n        const characterWidth = 100;\r\n        const characterHeight = 500;\r\n\r\n        // Speech Bubble\r\n        const speechBubbleGraphics = context.add.graphics({ fillStyle: { color: 0xffffff } });\r\n        const speechBubble = new Phaser.Geom.Rectangle(this.x, this.y, speechBubbleWidth, speechBubbleHeight);\r\n        speechBubbleGraphics.fillRectShape(speechBubble);\r\n\r\n        context.input.on('pointerdown', (pointer) => {\r\n            if(speechBubble.contains(pointer.x, pointer.y))\r\n            {\r\n                self.messageTimer.paused = false;\r\n            }\r\n        });\r\n\r\n        // Speech Bubble Text\r\n        this.speechBubbleText = context.add.text(this.x + 5, this.y + 5, '', { color: '#000' });\r\n\r\n        // Character\r\n        const characterGraphics = context.add.graphics({ fillStyle: { color: 0xff0000 } });\r\n        const character = new Phaser.Geom.Rectangle(\r\n            this.x + speechBubbleWidth - characterWidth,\r\n            this.y + speechBubbleHeight + 20,\r\n            characterWidth,\r\n            characterHeight);\r\n        characterGraphics.fillRectShape(character);\r\n    }\r\n\r\n    queueMessages(context, messages)\r\n    {\r\n        const self = this;\r\n        \r\n        if(self.messageTimer != null)\r\n        {\r\n            return new Promise((resolve, reject) => { resolve(); });\r\n        }\r\n\r\n        this.queuedMessages = messages;\r\n        return new Promise((resolve, reject) => {\r\n\r\n            self.messageTimer = context.time.addEvent({\r\n                delay: 50,\r\n                callback: () => {\r\n                    if(self.queuedMessages.length === 0)\r\n                    {\r\n                        self.messageTimer.remove();\r\n                        self.messageTimer = null;\r\n                        resolve();\r\n                        return;\r\n                    }\r\n    \r\n                    self.currMessageIndex++;\r\n\r\n                    const currMessage = self.queuedMessages[0];\r\n    \r\n                    if(self.currMessageIndex > currMessage.length)\r\n                    {\r\n                        self.currMessageIndex = 0;\r\n                        self.queuedMessages.shift();\r\n                        self.messageTimer.paused = true;\r\n                        return;\r\n                    }\r\n    \r\n                    const message = currMessage.slice(0, self.currMessageIndex);\r\n                    self.speechBubbleText.setText(message);\r\n                },\r\n                callbackScope: this,\r\n                loop: true\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    updateMessage(text)\r\n    {\r\n        this.speechBubbleText.setText(text);\r\n    }\r\n}","export default class extends Phaser.Scene {\r\n\r\n    constructor()\r\n    {\r\n        super('GameOverScene');\r\n\r\n        this.finalScore = 0;\r\n    }\r\n\r\n    init(data)\r\n    {\r\n        this.finalScore = data.score;\r\n    }\r\n\r\n    create()\r\n    {\r\n        const self = this;\r\n\r\n        // Title\r\n        this.add.text(50, 50, 'Game Over!');\r\n\r\n        // Score\r\n        this.add.text(50, 100, `Final Score: ${this.finalScore}`);\r\n\r\n        // \"Return to Main Menu\" Button\r\n        const startOverBtn = this.add.text(50, 150, 'Return to Main Menu');\r\n        startOverBtn.setInteractive();\r\n        startOverBtn.on('pointerdown', () => { self.scene.start('TitleScene'); });\r\n    }\r\n    \r\n}","import TitleScene from './scenes/TitleScene';\r\nimport RoundScene from './scenes/RoundScene';\r\nimport GameOverScene from './scenes/GameOverScene';\r\n\r\nconst config = {\r\n    type: Phaser.AUTO,\r\n    width: 800,\r\n    height: 1200, // 600\r\n    scene: [TitleScene, RoundScene, GameOverScene]\r\n};\r\n\r\nconst game = new Phaser.Game(config);"],"sourceRoot":""}