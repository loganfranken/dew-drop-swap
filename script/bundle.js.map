{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./script/Utility.js","webpack:///./script/TileState.js","webpack:///./script/TileGenerationBehavior.js","webpack:///./script/TileType.js","webpack:///./script/TileGrid.js","webpack:///./script/Tile.js","webpack:///./script/main.js","webpack:///./script/scenes/TitleScene.js","webpack:///./script/scenes/RoundScene.js","webpack:///./script/ActionQueue.js","webpack:///./script/ScoreDisplay.js","webpack:///./script/Timer.js","webpack:///./script/DialogManager.js","webpack:///./script/DialogScript.js","webpack:///./script/Guide.js","webpack:///./script/scenes/GameOverScene.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","getRandomItem","items","Math","floor","random","length","TileState","TileGenerationBehavior","TileType","imageKey","TileGrid","[object Object]","tileGridWidth","tileGridHeight","tileSize","offsetX","offsetY","onTileSelect","onTileMatch","queue","this","tileGrid","tileImageContainer","playAreaOffset","tileGenerationBehavior","y","x","createTile","getTileType","context","add","container","forEachTile","tile","image","maskShape","make","graphics","fillStyle","fillRect","mask","Phaser","Display","Masks","GeometryMask","self","matchedTiles","getMatches","destroys","forEach","push","destroy","Promise","all","state","drops","closestY","closestTile","getTileDrop","forEachPlayableTile","adjustedY","firstTile","secondTile","firstTileX","firstTileY","firstTileGridX","tileGridX","firstTileGridY","tileGridY","secondTileX","secondTileY","secondTileGridX","secondTileGridY","firstSwap","updatePosition","secondSwap","targetGridX","targetGridY","isPlayable","targetTileType","tileType","matchedXTiles","matchedYTiles","currX","currTile","currY","callback","isActivated","setInteractive","on","setTintFill","clearTint","resolve","reject","tweens","targets","ease","duration","onComplete","alpha","remove","getTileX","getTileY","behavior","aboveTile","belowTile","leftTile","rightTile","filter","map","config","type","AUTO","width","height","scene","Scene","super","text","startBtn","start","level","score","selectedTiles","scoreDisplay","timer","guide","comboCount","totalMatches","load","data","queuedActions","currentAction","shift","action","then","scoreText","comboText","setText","seconds","tick","time","addEvent","delay","callbackScope","loop","minutes","script","introMessages","getDisplayTileMatchMessages","getScript","messageTimer","currMessageIndex","queuedMessages","isBlockingGameplay","speechBubbleGraphics","color","speechBubble","Geom","Rectangle","fillRectShape","speechBubbleTextStyle","wordWrap","useAdvancedWrap","speechBubbleText","characterGraphics","character","queueMessages","messages","currMessage","paused","message","slice","input","progressDialogue","isActionRunning","hasActions","next","update","canSelect","deactivate","activate","selectedTile","xDiff","abs","yDiff","firstSelectedTile","secondSelectedTile","swapTiles","hasMatches","updateScore","displayTileMatchMessage","updateCombo","finalScore","startOverBtn","Game"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// Source: https://stackoverflow.com/questions/5915096/get-random-item-from-javascript-array\r\nconst getRandomItem = (items) => {\r\n    return items[Math.floor(Math.random() * items.length)];\r\n}\r\n\r\nexport {\r\n    getRandomItem\r\n}","export default {\r\n    Active: 0,\r\n    Destroyed: 1\r\n};","export default {\r\n    None: 0,\r\n    EasyWin: 1\r\n};","export default [\r\n    { name: 'Blue', imageKey: 'tile_01' },\r\n    { name: 'Green', imageKey: 'tile_02' },\r\n    { name: 'Red', imageKey: 'tile_03' },\r\n    { name: 'Yellow', imageKey: 'tile_04' }\r\n];","import { getRandomItem } from './Utility';\r\nimport Tile from './Tile';\r\nimport TileGenerationBehavior from './TileGenerationBehavior';\r\nimport TileState from './TileState';\r\nimport TileType from './TileType';\r\n\r\nexport default class {\r\n\r\n    constructor(tileGridWidth, tileGridHeight, tileSize, offsetX, offsetY, onTileSelect, onTileMatch, queue)\r\n    {\r\n        this.offsetX = offsetX;\r\n        this.offsetY = offsetY;\r\n        this.tileSize = tileSize;\r\n        this.tileGridHeight = tileGridHeight;\r\n        this.tileGridWidth = tileGridWidth;\r\n        this.tileGrid = [];\r\n        this.tileImageContainer = null;\r\n        this.playAreaOffset = (this.tileGridHeight * this.tileSize);\r\n\r\n        this.onTileSelect = onTileSelect;\r\n        this.onTileMatch = onTileMatch;\r\n\r\n        this.tileGenerationBehavior = TileGenerationBehavior.None;\r\n\r\n        this.queue = queue;\r\n\r\n        // We're going to generate a grid that's twice the height of\r\n        // the desired tile grid height since we'll use the hidden, upper\r\n        // region to stage the bricks that will fall into the play area\r\n        for(let y = 0; y < tileGridHeight * 2; y++)\r\n        {\r\n            this.tileGrid[y] = [];\r\n            for(let x = 0; x < tileGridWidth; x++)\r\n            {\r\n                this.tileGrid[y][x] = (y < tileGridHeight)\r\n                    ? null\r\n                    : this.createTile(this.getTileType(x, y, this.tileGenerationBehavior), x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    create(context)\r\n    {\r\n        this.tileImageContainer = context.add.container();\r\n\r\n        // Create all of the tiles\r\n        this.forEachTile(tile => {\r\n\r\n            if(tile === null)\r\n            {\r\n                return;\r\n            }\r\n\r\n            tile.create(context);\r\n            this.tileImageContainer.add(tile.image);\r\n\r\n        });\r\n\r\n        // Create a mask to only show the play area\r\n        const maskShape = context.make.graphics();\r\n        maskShape.fillStyle(0xffffff, 1);\r\n        maskShape.fillRect(this.offsetX/2, this.offsetY/2 + (this.tileGridHeight * this.tileSize), this.tileGridWidth * this.tileSize, this.tileGridHeight * this.tileSize);\r\n        \r\n        this.tileImageContainer.mask = new Phaser.Display.Masks.GeometryMask(context, maskShape);\r\n    }\r\n\r\n    update(context)\r\n    {\r\n        const self = this;\r\n\r\n        if(self.queue.length > 0)\r\n        {\r\n            return;\r\n        }\r\n\r\n        // Detect and destroy any matches\r\n        const matchedTiles = self.getMatches();\r\n\r\n        if(matchedTiles.length > 0)\r\n        {\r\n            self.onTileMatch(context, matchedTiles);\r\n        }\r\n\r\n        let destroys = [];\r\n        matchedTiles.forEach(t => { destroys.push(t.destroy(context, this.tileImageContainer)); });\r\n\r\n        if(destroys.length > 0)\r\n        {\r\n            self.queue.push(() => { return Promise.all(destroys); });\r\n        }\r\n\r\n        // Remove any destroyed tiles\r\n        self.forEachTile((tile, x, y) => {\r\n\r\n            if(tile === null)\r\n            {\r\n                return;\r\n            }\r\n\r\n            if(tile.state === TileState.Destroyed)\r\n            {\r\n                self.tileGrid[y][x] = null;\r\n            }\r\n\r\n        });\r\n\r\n        // Shift all of the tiles downward to fill empty spots\r\n        let drops = [];\r\n        for(let x = 0; x < this.tileGridWidth; x++)\r\n        {\r\n            let y = (this.tileGridHeight * 2) - 1;\r\n            while(y >= 0)\r\n            {\r\n                // If the tile is null...\r\n                if(self.tileGrid[y][x] === null)\r\n                {\r\n                    // ...find the closest tile that's not null...\r\n                    let closestY = y - 1;\r\n                    while(closestY >= 0)\r\n                    {\r\n                        let closestTile = self.tileGrid[closestY][x];\r\n                        if(closestTile !== null)\r\n                        {\r\n                            // ...and shift it downward\r\n                            self.tileGrid[y][x] = closestTile;\r\n                            self.tileGrid[closestY][x] = null;\r\n                            drops.push(this.getTileDrop(context, closestTile, x, y));\r\n                            y--;\r\n                        }\r\n                        closestY--;\r\n                    }\r\n                }\r\n\r\n                y--;\r\n            }\r\n        }\r\n\r\n        // Fill in all of the empty tiles\r\n        self.forEachPlayableTile((tile, x, y) => {\r\n            if(tile === null)\r\n            {\r\n                const adjustedY = y - self.tileGridHeight;\r\n\r\n                const tile = self.createTile(self.getTileType(x, y, self.tileGenerationBehavior), x, adjustedY);\r\n                self.tileGrid[adjustedY][x] = tile;\r\n                tile.create(context);\r\n                self.tileImageContainer.add(tile.image);\r\n            }\r\n        });\r\n\r\n        if(drops.length > 0)\r\n        {\r\n            self.queue.push(() => { return Promise.all(drops); });\r\n        }\r\n    }\r\n\r\n    swapTiles(context, firstTile, secondTile)\r\n    {\r\n        let self = this;\r\n\r\n        self.queue.push(() => {\r\n            \r\n            let firstTileX = firstTile.x;\r\n            let firstTileY = firstTile.y;\r\n            let firstTileGridX = firstTile.tileGridX;\r\n            let firstTileGridY = firstTile.tileGridY;\r\n    \r\n            let secondTileX = secondTile.x;\r\n            let secondTileY = secondTile.y;\r\n            let secondTileGridX = secondTile.tileGridX;\r\n            let secondTileGridY = secondTile.tileGridY;\r\n    \r\n            let firstSwap = secondTile.updatePosition(context, firstTileX, firstTileY, firstTileGridX, firstTileGridY);\r\n            self.tileGrid[firstTileGridY][firstTileGridX] = secondTile;\r\n    \r\n            let secondSwap = firstTile.updatePosition(context, secondTileX, secondTileY, secondTileGridX, secondTileGridY);\r\n            self.tileGrid[secondTileGridY][secondTileGridX] = firstTile;\r\n\r\n            return Promise.all([firstSwap, secondSwap]);\r\n\r\n        });\r\n    }\r\n\r\n    hasMatches(targetGridX, targetGridY)\r\n    {\r\n        return this.getMatches(targetGridX, targetGridY).length > 0;\r\n    }\r\n\r\n    getMatches(targetGridX, targetGridY)\r\n    {\r\n        const self = this;\r\n        const matchedTiles = [];\r\n\r\n        self.forEachTile((tile, x, y) => {\r\n\r\n            if(\r\n                (typeof targetGridX !== 'undefined' && x !== targetGridX) &&\r\n                (typeof targetGridY !== 'undefined' && y !== targetGridY)\r\n              )\r\n            {\r\n                return;\r\n            }\r\n\r\n            if(!this.isPlayable(tile))\r\n            {\r\n                return;\r\n            }\r\n\r\n            const targetTileType = tile.tileType;\r\n            const matchedXTiles = [];\r\n            const matchedYTiles = [];\r\n\r\n            // Check for matches to the right\r\n            let currX = (x + 1);\r\n            while(currX < self.tileGridWidth)\r\n            {\r\n                const currTile = self.tileGrid[y][currX];\r\n\r\n                if(currTile != null && targetTileType.name === currTile.tileType.name)\r\n                {\r\n                    matchedXTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currX++;\r\n            }\r\n\r\n            // Check for matches to the left\r\n            currX = (x - 1);\r\n            while(currX > 0)\r\n            {\r\n                const currTile = self.tileGrid[y][currX];\r\n\r\n                if(currTile != null && targetTileType.name === currTile.tileType.name)\r\n                {\r\n                    matchedXTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currX--;\r\n            }\r\n\r\n            // Check matches downwards\r\n            let currY = (y + 1);\r\n            while(currY < self.tileGridHeight)\r\n            {\r\n                const currTile = self.tileGrid[currY][x];\r\n\r\n                if(currTile != null && targetTileType.name === currTile.tileType.name)\r\n                {\r\n                    matchedYTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currY++;\r\n            }\r\n\r\n            // Check matches upwards\r\n            currY = (y - 1);\r\n            while(currY > 0)\r\n            {\r\n                const currTile = self.tileGrid[currY][x];\r\n\r\n                if(currTile != null && targetTileType === currTile.tileType)\r\n                {\r\n                    matchedYTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currY--;\r\n            }\r\n            \r\n            if(matchedYTiles.length > 1)\r\n            {\r\n                matchedTiles.push(...matchedYTiles);\r\n            }\r\n            \r\n            if(matchedXTiles.length > 1)\r\n            {\r\n                matchedTiles.push(...matchedXTiles);\r\n            }\r\n\r\n            if(matchedYTiles.length > 1 || matchedXTiles.length > 1)\r\n            {\r\n                matchedTiles.push(tile);\r\n            }\r\n        });\r\n\r\n        return matchedTiles;\r\n    }\r\n\r\n    forEachTile(callback)\r\n    {\r\n        for(let y = 0; y < this.tileGridHeight * 2; y++)\r\n        {\r\n            for(let x = 0; x < this.tileGridWidth; x++)\r\n            {\r\n                callback(this.tileGrid[y][x], x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    forEachPlayableTile(callback)\r\n    {\r\n        for(let y = this.tileGridHeight; y < this.tileGridHeight * 2; y++)\r\n        {\r\n            for(let x = 0; x < this.tileGridWidth; x++)\r\n            {\r\n                callback(this.tileGrid[y][x], x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    createTile(tileType, x, y)\r\n    {\r\n        return new Tile(tileType, this.getTileX(x), this.getTileY(y), x, y, this.onTileSelect);\r\n    }\r\n\r\n    getTileDrop(context, tile, x, y)\r\n    {\r\n        return tile.updatePosition(context, this.getTileX(x), this.getTileY(y), x, y);\r\n    }\r\n\r\n    getTileX(x)\r\n    {\r\n        return this.offsetX + (this.tileSize * x);\r\n    }\r\n\r\n    getTileY(y)\r\n    {\r\n        return this.offsetY + (this.tileSize * y);\r\n    }\r\n\r\n    canSelect(tile)\r\n    {\r\n        return this.isPlayable(tile);\r\n    }\r\n\r\n    isPlayable(tile)\r\n    {\r\n        return (tile != null) && (tile.tileGridY > (this.tileGridHeight - 1));\r\n    }\r\n\r\n    getTileType(x, y, behavior)\r\n    {\r\n        const aboveTile = (y < 1) ? null : this.tileGrid[y - 1][x];\r\n        const belowTile = (y > self.tileGridHeight - 1 || !this.tileGrid[y + 1]) ? null : this.tileGrid[y + 1][x];\r\n\r\n        const leftTile = (x < 1) ? null : this.tileGrid[y][x - 1];\r\n        const rightTile = (x > self.tileGridWidth - 1) ? null : this.tileGrid[y][x + 1];\r\n\r\n        if(behavior == TileGenerationBehavior.EasyWin && (aboveTile != null || belowTile != null || leftTile != null || rightTile != null))\r\n        {\r\n            return getRandomItem([aboveTile, belowTile, leftTile, rightTile].filter(t => t != null).map(t => t.tileType));\r\n        }\r\n        else\r\n        {\r\n            return getRandomItem(TileType.filter(t =>\r\n                (aboveTile === null || t.name !== aboveTile.tileType.name) &&\r\n                (leftTile === null || t.name !== leftTile.tileType.name)\r\n            ));\r\n        }\r\n    }\r\n}","import TileState from './TileState';\r\n\r\nexport default class {\r\n\r\n    constructor(tileType, x, y, tileGridX, tileGridY, onTileSelect)\r\n    {\r\n        this.tileType = tileType;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.tileGridX = tileGridX;\r\n        this.tileGridY = tileGridY;\r\n        this.onTileSelect = onTileSelect;\r\n        this.image = null;\r\n        this.state = TileState.Active;\r\n        this.isActivated = false;\r\n    }\r\n\r\n    create(context)\r\n    {\r\n        this.image = context.add.image(this.x, this.y, this.tileType.imageKey);\r\n        this.image.setInteractive();\r\n        this.image.on('pointerdown', () => { this.onTileSelect(context, this); });\r\n    }\r\n\r\n    activate()\r\n    {\r\n        this.isActivated = true;\r\n        this.image.setTintFill(0xffffff);\r\n    }\r\n\r\n    deactivate()\r\n    {\r\n        this.isActivated = false;\r\n        this.image.clearTint();\r\n    }\r\n\r\n    updatePosition(context, x, y, tileGridX, tileGridY)\r\n    {\r\n        let self = this;\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            self.x = x;\r\n            self.y = y;\r\n            self.tileGridX = tileGridX;\r\n            self.tileGridY = tileGridY;\r\n\r\n            context.tweens.add({\r\n                targets: self.image,\r\n                x: x,\r\n                y: y,\r\n                ease: 'Power1',\r\n                duration: 500,\r\n                onComplete: () => { resolve() }\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    destroy(context, container)\r\n    {\r\n        let self = this;\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            context.tweens.add({\r\n                targets: self.image,\r\n                alpha: 0,\r\n                ease: 'Power1',\r\n                duration: 500,\r\n                onComplete: () => {\r\n\r\n                    container.remove(self.image);\r\n                    self.image.destroy();\r\n                    self.state = TileState.Destroyed;\r\n                    resolve();\r\n\r\n                }\r\n            });\r\n\r\n        });\r\n    }\r\n}","import TitleScene from './scenes/TitleScene';\r\nimport RoundScene from './scenes/RoundScene';\r\nimport GameOverScene from './scenes/GameOverScene';\r\n\r\nconst config = {\r\n    type: Phaser.AUTO,\r\n    width: 800,\r\n    height: 1200, // 600\r\n    scene: [TitleScene, RoundScene, GameOverScene]\r\n};\r\n\r\nconst game = new Phaser.Game(config);","export default class extends Phaser.Scene {\r\n\r\n    constructor()\r\n    {\r\n        super('TitleScene');\r\n    }\r\n\r\n    create()\r\n    {\r\n        const self = this;\r\n\r\n        // Title\r\n        this.add.text(50, 50, 'Match Three!');\r\n\r\n        // \"Start\" Button\r\n        const startBtn = this.add.text(50, 70, 'Start Game');\r\n        startBtn.setInteractive();\r\n        startBtn.on('pointerdown', () => { self.scene.start('RoundScene', { level: 0 }); });\r\n    }\r\n    \r\n}","import ActionQueue from '../ActionQueue';\r\nimport DialogManager from '../DialogManager';\r\nimport Guide from '../Guide';\r\nimport ScoreDisplay from '../ScoreDisplay';\r\nimport TileGrid from '../TileGrid';\r\nimport Timer from '../Timer';\r\n\r\nexport default class extends Phaser.Scene {\r\n\r\n    constructor()\r\n    {\r\n        super('RoundScene');\r\n\r\n        this.score = null;\r\n        this.queue = null;\r\n        this.selectedTiles = null;\r\n        this.tileGrid = null;\r\n        this.scoreDisplay = null;\r\n        this.timer = null;\r\n \r\n        this.guide = null;\r\n        this.level = null;\r\n\r\n        this.comboCount = null;\r\n        this.totalMatches = null;\r\n    }\r\n\r\n    preload()\r\n    {\r\n        this.load.image('tile_01', 'assets/tile_01.png');\r\n        this.load.image('tile_02', 'assets/tile_02.png');\r\n        this.load.image('tile_03', 'assets/tile_03.png');\r\n        this.load.image('tile_04', 'assets/tile_04.png');\r\n    }\r\n\r\n    init(data)\r\n    {\r\n        this.level = data.level;\r\n    }\r\n\r\n    create()\r\n    {\r\n        this.score = 0;\r\n        this.comboCount = 0;\r\n        this.totalMatches = 0;\r\n\r\n        this.queue = new ActionQueue();\r\n\r\n        this.selectedTiles = [];\r\n        this.tileGrid = new TileGrid(6, 6, 50, 50, 50, this.onTileSelect, this.onTileMatch, this.queue);\r\n        this.scoreDisplay = new ScoreDisplay(5, 5);\r\n        this.timer = new Timer(500, 5, 300);\r\n\r\n        const dialogManager = new DialogManager();\r\n        const script = dialogManager.getScript(this.level);\r\n        this.guide = new Guide(100, 100, script);\r\n\r\n        this.tileGrid.create(this);\r\n        this.scoreDisplay.create(this);\r\n        this.timer.create(this);\r\n        this.guide.create(this);\r\n\r\n        const self = this;\r\n        this.input.on('pointerdown', () => { self.guide.progressDialogue(); });\r\n    }\r\n\r\n    update()\r\n    {\r\n        // Have we run out of time?\r\n        if(this.timer.seconds <= 0)\r\n        {\r\n            this.scene.start('GameOverScene', { score: this.score });\r\n            return;\r\n        }\r\n\r\n        // Are we currently executing a queued action?\r\n        if(this.queue.isActionRunning())\r\n        {\r\n            return;\r\n        }\r\n\r\n        // Do we have any queued actions on the stack?\r\n        if(this.queue.hasActions())\r\n        {\r\n            this.queue.next();\r\n            return;\r\n        }\r\n\r\n        // If nothing's left in the queue, we can move the game's state forward\r\n        this.tileGrid.update(this);\r\n    }\r\n\r\n    onTileSelect(context, tile)\r\n    {\r\n        // Are we currently executing a queued action?\r\n        if(context.queue.isActionRunning())\r\n        {\r\n            return;\r\n        }\r\n\r\n        // Is the guide currently blocking gameplay?\r\n        if(context.guide.isBlockingGameplay)\r\n        {\r\n            return;\r\n        }\r\n    \r\n        // Can we select this tile?\r\n        if(!context.tileGrid.canSelect(tile))\r\n        {\r\n            return;\r\n        }\r\n\r\n        // Is this tile already selected?\r\n        if(tile.isActivated)\r\n        {\r\n            context.selectedTiles = [];\r\n            tile.deactivate();\r\n            return;\r\n        }\r\n    \r\n        if(context.selectedTiles.length === 0)\r\n        {\r\n            context.selectedTiles.push(tile);\r\n            tile.activate();\r\n            return;\r\n        }\r\n    \r\n        if(context.selectedTiles.length === 1)\r\n        {\r\n            const selectedTile = context.selectedTiles[0];\r\n            const xDiff = Math.abs(selectedTile.tileGridX - tile.tileGridX);\r\n            const yDiff = Math.abs(selectedTile.tileGridY - tile.tileGridY);\r\n    \r\n            if((xDiff === 1 && yDiff === 0) || (xDiff === 0 && yDiff === 1))\r\n            {\r\n                context.selectedTiles.push(tile);\r\n    \r\n                let firstSelectedTile = context.selectedTiles[0];\r\n                let secondSelectedTile = context.selectedTiles[1];\r\n    \r\n                context.tileGrid.swapTiles(context, firstSelectedTile, secondSelectedTile);\r\n    \r\n                context.queue.push(() => {\r\n    \r\n                    // If there are no matches, swap the tiles back\r\n                    if(\r\n                        !context.tileGrid.hasMatches(firstSelectedTile.tileGridX, firstSelectedTile.tileGridY) &&\r\n                        !context.tileGrid.hasMatches(secondSelectedTile.tileGridX, secondSelectedTile.tileGridY)\r\n                    )\r\n                    {\r\n                        context.tileGrid.swapTiles(context, firstSelectedTile, secondSelectedTile);\r\n                    }\r\n    \r\n                    return Promise.resolve();\r\n    \r\n                });\r\n    \r\n                context.selectedTiles.forEach((tile) => { tile.deactivate(); });\r\n                context.selectedTiles = [];\r\n                \r\n                context.comboCount = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    onTileMatch(context, matchedTiles)\r\n    {\r\n        context.comboCount++;\r\n        context.totalMatches++;\r\n\r\n        context.score += (10 * context.comboCount);\r\n        context.scoreDisplay.updateScore(context.score);\r\n\r\n        context.guide.displayTileMatchMessage(context, {\r\n            comboCount: context.comboCount,\r\n            totalMatches: context.totalMatches\r\n        });\r\n\r\n        if(context.comboCount > 1)\r\n        {\r\n            context.scoreDisplay.updateCombo(`${context.comboCount}x multiplier!`);\r\n        }\r\n        else\r\n        {\r\n            context.scoreDisplay.updateCombo('');\r\n        }\r\n    }\r\n    \r\n}","export default class {\r\n\r\n    constructor()\r\n    {\r\n        this.queuedActions = [];\r\n        this.currentAction = null;\r\n    }\r\n\r\n    isActionRunning()\r\n    {\r\n        return this.currentAction != null;\r\n    }\r\n\r\n    hasActions()\r\n    {\r\n        return this.queuedActions.length > 0;\r\n    }\r\n\r\n    next()\r\n    {\r\n        this.currentAction = this.queuedActions.shift();\r\n        this.currentAction();\r\n    }\r\n\r\n    push(action)\r\n    {\r\n        var self = this;\r\n        self.queuedActions.push(() => { action().then(() => { self.currentAction = null; }) });\r\n    }\r\n\r\n}","export default class {\r\n\r\n    constructor(x, y)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.scoreText = null;\r\n        this.comboText = null;\r\n        this.score = 0;\r\n    }\r\n\r\n    create(context)\r\n    {\r\n        this.scoreText = context.add.text(this.x, this.y, this.score);\r\n        this.comboText = context.add.text(this.x, this.y + 20, '');\r\n    }\r\n\r\n    updateScore(score)\r\n    {\r\n        this.score = score;\r\n        this.scoreText.setText(score);\r\n    }\r\n\r\n    updateCombo(text)\r\n    {\r\n        this.comboText.setText(text);\r\n    }\r\n}","export default class {\r\n\r\n    constructor(x, y, seconds)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.text = null;\r\n        this.seconds = seconds;\r\n    }\r\n\r\n    create(context)\r\n    {\r\n        this.text = context.add.text(this.x, this.y, this.score);\r\n        \r\n        this.tick();\r\n        context.time.addEvent({ delay: 1000, callback: this.tick, callbackScope: this, loop: true })\r\n    }\r\n\r\n    tick()\r\n    {\r\n        if(this.seconds <= 0)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.seconds--;\r\n\r\n        // Display the remaining time\r\n        const minutes = Math.floor(this.seconds / 60);\r\n\r\n        let seconds = (this.seconds % 60);\r\n        if(seconds < 10)\r\n        {\r\n            seconds = '0' + seconds;\r\n        }\r\n\r\n        this.text.setText(`${minutes}:${seconds}`);\r\n    }\r\n}","import DialogScript from \"./DialogScript\";\r\n\r\nexport default class {\r\n\r\n    getScript(level)\r\n    {\r\n        const script = new DialogScript();\r\n\r\n        switch(level)\r\n        {\r\n            // Level 0 (Intro)\r\n            case 0:\r\n\r\n                script.introMessages = [\r\n                    \"Oh, doozle, you made it! You're here! (Click or tap anywhere!)\",\r\n                    \"We need your help collecting dew drops!\",\r\n                    \"If you match three or more dew drops of the same color, we can collect them!\",\r\n                    \"To make a match, select two dew drops to swap their places!\"\r\n                ];\r\n\r\n                script.getDisplayTileMatchMessages = (data) => {\r\n\r\n                    if(data.totalMatches === 1)\r\n                    {\r\n                        return [\r\n                            \"You got it! That's it!\",\r\n                            \"You collect extra dew drops when you chain together matches in a combo!\",\r\n                            \"See if you can collect X dew drops!\"\r\n                        ];\r\n                    }\r\n\r\n                };\r\n\r\n                break;\r\n\r\n            // Level 1 (Timer Intro)\r\n            case 1:\r\n\r\n                script.introMessages = [\r\n                    \"You're so good at this!\",\r\n                    \"We'll have to hurry this time!\",\r\n                    \"We only have one minute before the sun dries up all the dew drops!\",\r\n                    \"Collect at least X dew drops in one minute!\"\r\n                ];\r\n\r\n                break;\r\n\r\n            // Level 2 (Breaking the Fourth Wall)\r\n            case 2:\r\n\r\n                script.introMessages = [\r\n                    \"Wow, we're so proud of you!\",\r\n                    \"This round you'll only have 30 seconds to collect at least X dew drops!\"\r\n                ];\r\n\r\n                // \"Wait, wait, sorry, hold on.\"\r\n                // \"It's too early for the \\\"Lose in a Panic\\\" scenario.\"\r\n                // \"So sorry about that.\"\r\n                // \"You've been really great so far, honestly.\"\r\n                // \"You know, what, let's just go to the next round and we'll take it from the top.\"\r\n\r\n                break;\r\n\r\n            // Level 3 (Easy Win)\r\n            case 3:\r\n\r\n                script.introMessages = [\r\n                    \"Alright, I think we've got everything figured out.\",\r\n                    \"Okay, for this next round, let me set you up:\",\r\n                    \"Remember, you've been winnig the last few rounds and you're gaining confidence.\",\r\n                    \"In this round, it's going to be easy for you to get combos.\",\r\n                    \"So the idea here is that you're going to get a little too confident, right?\",\r\n                    \"Like a little full of yourself, alright?\",\r\n                    \"Okay, great! Let's do this:\"\r\n                ];\r\n\r\n                break;\r\n\r\n            // Level 4 (Losing Confidence)\r\n            case 4:\r\n\r\n                script.introMessages = [\r\n                    \"Okay, okay, great stuff.\",\r\n                    \"For this round, you're bringing all of that pride, all of that hubris.\",\r\n                    \"And, when the round starts, things are still going your way.\",\r\n                    \"But guess what?\",\r\n                    \"Halfway through this round, things start getting a little harder.\",\r\n                    \"This is where we to start your chip away at your pride as the player.\"\r\n                ];\r\n\r\n                break;\r\n\r\n            // Level 5 (Fall From Grace)\r\n            case 5:\r\n\r\n                script.introMessages = [\r\n                    \"Wow, really moving work. It feels so authentic.\",\r\n                    \"It's been a joy working with you.\",\r\n                    \"Okay, here we go, this is a pivotal scene:\",\r\n                    \"This round will not go your way at all. At all.\",\r\n                    \"This is your fall from grace.\",\r\n                ];\r\n\r\n                break;\r\n\r\n            // Level 6 (Wallowing)\r\n            case 6:\r\n\r\n                script.introMessages = [\r\n                    \"Okay, let's move right into the next scene:\",\r\n                    \"Here, you are wallowing, right?\",\r\n                    \"You are in the pit of despair and you can't see a way out.\",\r\n                    \"This round won't be particularly hard, but you can't seem to find any matches.\"\r\n                ];\r\n\r\n                break;\r\n\r\n            // Level 7 (Pheonix Rises)\r\n            case 7:\r\n\r\n                script.introMessages = [\r\n                    \"Now, you've been wallowing. You've feeling really low.\",\r\n                    \"You're in such despair, that in this round...\",\r\n                    \"There's an obvious combo.\",\r\n                    \"Right there, right in front of your face.\",\r\n                    \"But you can't see it through the despair.\",\r\n                    \"But then, in the last ten seconds of the round, you see it.\",\r\n                    \"Boom, it's the perfect match.\",\r\n                    \"And the pheonix rises once again!\"\r\n                ];\r\n\r\n                break;\r\n\r\n            // Level 8 (Victory Lap)\r\n            case 8:\r\n\r\n                script.introMessages = [\r\n                    \"Our hero is back!\",\r\n                    \"This final scene is our victory lap.\",\r\n                    \"However, we don't want too many combos in this round, right?\",\r\n                    \"This is a round the player wins on their own.\",\r\n                    \"No assistance from the game.\",\r\n                    \"A true hero's victory!\",\r\n                    \"Alright, let's do this: I've got an appointment after this.\"\r\n                ];\r\n\r\n                break;\r\n\r\n        }\r\n\r\n        return script;\r\n    }\r\n\r\n}","export default class {\r\n\r\n    constructor()\r\n    {\r\n        this.introMessages = [];\r\n        this.getDisplayTileMatchMessages = () => {};\r\n    }\r\n}","export default class {\r\n\r\n    constructor(x, y, script)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.script = script;\r\n\r\n        this.messageTimer = null;\r\n        this.currMessageIndex = 0;\r\n        this.queuedMessages = null;\r\n        this.isBlockingGameplay = false;\r\n    }\r\n\r\n    create(context)\r\n    {\r\n        const self = this;\r\n\r\n        const speechBubbleWidth = 500;\r\n        const speechBubbleHeight = 100;\r\n        \r\n        const characterWidth = 100;\r\n        const characterHeight = 500;\r\n\r\n        // Speech Bubble\r\n        const speechBubbleGraphics = context.add.graphics({ fillStyle: { color: 0xffffff } });\r\n        const speechBubble = new Phaser.Geom.Rectangle(this.x, this.y, speechBubbleWidth, speechBubbleHeight);\r\n        speechBubbleGraphics.fillRectShape(speechBubble);\r\n\r\n        // Speech Bubble Text\r\n        const speechBubbleTextStyle = { color: '#000', wordWrap: { width: speechBubbleWidth, useAdvancedWrap: true } };\r\n        this.speechBubbleText = context.add.text(this.x + 5, this.y + 5, '', speechBubbleTextStyle);\r\n\r\n        // Character\r\n        const characterGraphics = context.add.graphics({ fillStyle: { color: 0xff0000 } });\r\n        const character = new Phaser.Geom.Rectangle(\r\n            this.x + speechBubbleWidth - characterWidth,\r\n            this.y + speechBubbleHeight + 20,\r\n            characterWidth,\r\n            characterHeight);\r\n        characterGraphics.fillRectShape(character);\r\n\r\n        self.queueMessages(context, this.script.introMessages);\r\n    }\r\n\r\n    queueMessages(context, messages)\r\n    {\r\n        if(!messages)\r\n        {\r\n            return;\r\n        }\r\n\r\n        const self = this;\r\n\r\n        if(self.queuedMessages === null)\r\n        {\r\n            self.queuedMessages = [];\r\n        }\r\n\r\n        self.queuedMessages.push(...messages);\r\n\r\n        if(self.messageTimer != null)\r\n        {\r\n            return;\r\n        }\r\n\r\n        self.isBlockingGameplay = true;\r\n        self.messageTimer = context.time.addEvent({\r\n            delay: 50,\r\n            callback: () => {\r\n                self.currMessageIndex++;\r\n\r\n                const currMessage = self.queuedMessages[0];\r\n                if(self.currMessageIndex > currMessage.length)\r\n                {\r\n                    self.currMessageIndex = 0;\r\n                    self.queuedMessages.shift();\r\n                    self.messageTimer.paused = true;\r\n\r\n                    if(self.queuedMessages.length === 0)\r\n                    {\r\n                        self.isBlockingGameplay = false;\r\n                        self.messageTimer.remove();\r\n                        self.messageTimer = null;\r\n                        return;\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                const message = currMessage.slice(0, self.currMessageIndex);\r\n                self.speechBubbleText.setText(message);\r\n            },\r\n            callbackScope: this,\r\n            loop: true\r\n        });\r\n    }\r\n\r\n    displayTileMatchMessage(context, data)\r\n    {\r\n        const messages = this.script.getDisplayTileMatchMessages(data);\r\n        this.queueMessages(context, messages);\r\n    }\r\n\r\n    progressDialogue()\r\n    {\r\n        this.messageTimer.paused = false;\r\n    }\r\n}","export default class extends Phaser.Scene {\r\n\r\n    constructor()\r\n    {\r\n        super('GameOverScene');\r\n\r\n        this.finalScore = 0;\r\n    }\r\n\r\n    init(data)\r\n    {\r\n        this.finalScore = data.score;\r\n    }\r\n\r\n    create()\r\n    {\r\n        const self = this;\r\n\r\n        // Title\r\n        this.add.text(50, 50, 'Game Over!');\r\n\r\n        // Score\r\n        this.add.text(50, 100, `Final Score: ${this.finalScore}`);\r\n\r\n        // \"Return to Main Menu\" Button\r\n        const startOverBtn = this.add.text(50, 150, 'Return to Main Menu');\r\n        startOverBtn.setInteractive();\r\n        startOverBtn.on('pointerdown', () => { self.scene.start('TitleScene'); });\r\n    }\r\n    \r\n}"],"sourceRoot":""}