{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./script/Utility.js","webpack:///./script/TileState.js","webpack:///./script/TileGenerationBehavior.js","webpack:///./script/TileType.js","webpack:///./script/main.js","webpack:///./script/scenes/TitleScene.js","webpack:///./script/scenes/RoundScene.js","webpack:///./script/ActionQueue.js","webpack:///./script/TileGrid.js","webpack:///./script/Tile.js","webpack:///./script/ScoreDisplay.js","webpack:///./script/Timer.js","webpack:///./script/scenes/GameOverScene.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","getRandomItem","items","Math","floor","random","length","TileState","TileGenerationBehavior","TileType","imageKey","config","type","Phaser","AUTO","width","height","scene","Scene","[object Object]","super","this","add","text","time","addEvent","delay","callback","start","callbackScope","score","queue","selectedTiles","tileGrid","scoreDisplay","timer","comboCount","load","image","queuedActions","currentAction","shift","action","self","push","then","tileGridWidth","tileGridHeight","tileSize","offsetX","offsetY","onTileSelect","onTileMatch","tileImageContainer","playAreaOffset","y","x","createTile","getTileType","context","container","forEachTile","tile","maskShape","make","graphics","fillStyle","fillRect","mask","Display","Masks","GeometryMask","matchedTiles","getMatches","destroys","forEach","destroy","Promise","all","state","drops","closestY","closestTile","getTileDrop","firstTile","secondTile","firstTileX","firstTileY","firstTileGridX","tileGridX","firstTileGridY","tileGridY","secondTileX","secondTileY","secondTileGridX","secondTileGridY","firstSwap","updatePosition","secondSwap","targetGridX","targetGridY","isPlayable","targetTileType","tileType","matchedXTiles","matchedYTiles","currX","currTile","currY","setInteractive","on","setTintFill","clearTint","resolve","reject","tweens","targets","ease","duration","onComplete","alpha","remove","getTileX","getTileY","behavior","aboveTile","leftTile","filter","map","setText","seconds","tick","loop","minutes","isActionRunning","hasActions","next","update","canSelect","activate","selectedTile","xDiff","abs","yDiff","firstSelectedTile","secondSelectedTile","swapTiles","hasMatches","deactivate","updateScore","finalScore","data","Game"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// Source: https://stackoverflow.com/questions/5915096/get-random-item-from-javascript-array\r\nconst getRandomItem = (items) => {\r\n    return items[Math.floor(Math.random() * items.length)];\r\n}\r\n\r\nexport {\r\n    getRandomItem\r\n}","export default {\r\n    Active: 0,\r\n    Destroyed: 1\r\n};","export default {\r\n    None: 0,\r\n    EasyWin: 1\r\n};","export default [\r\n    { name: 'Blue', imageKey: 'tile_01' },\r\n    { name: 'Green', imageKey: 'tile_02' },\r\n    { name: 'Red', imageKey: 'tile_03' },\r\n    { name: 'Yellow', imageKey: 'tile_04' }\r\n];","import TitleScene from './scenes/TitleScene';\r\nimport RoundScene from './scenes/RoundScene';\r\nimport GameOverScene from './scenes/GameOverScene';\r\n\r\nconst config = {\r\n    type: Phaser.AUTO,\r\n    width: 800,\r\n    height: 1200, // 600\r\n    scene: [TitleScene, RoundScene, GameOverScene]\r\n};\r\n\r\nconst game = new Phaser.Game(config);","export default class extends Phaser.Scene {\r\n\r\n    constructor()\r\n    {\r\n        super('TitleScene');\r\n    }\r\n\r\n    create()\r\n    {\r\n        this.add.text(50, 50, 'Match Three!');\r\n        this.time.addEvent({ delay: 1000, callback: function() { this.scene.start('RoundScene') }, callbackScope: this })\r\n    }\r\n    \r\n}","import ActionQueue from '../ActionQueue';\r\nimport ScoreDisplay from '../ScoreDisplay';\r\nimport TileGrid from '../TileGrid';\r\nimport Timer from '../Timer';\r\n\r\nexport default class extends Phaser.Scene {\r\n\r\n    constructor()\r\n    {\r\n        super('RoundScene');\r\n\r\n        this.score = null;\r\n        this.queue = null;\r\n        this.selectedTiles = null;\r\n        this.tileGrid = null;\r\n        this.scoreDisplay = null;\r\n        this.timer = null;\r\n        this.comboCount = null;\r\n    }\r\n\r\n    preload()\r\n    {\r\n        this.load.image('tile_01', 'assets/tile_01.png');\r\n        this.load.image('tile_02', 'assets/tile_02.png');\r\n        this.load.image('tile_03', 'assets/tile_03.png');\r\n        this.load.image('tile_04', 'assets/tile_04.png');\r\n    }\r\n\r\n    create()\r\n    {\r\n        this.score = 0;\r\n        this.comboCount = 0;\r\n\r\n        this.queue = new ActionQueue();\r\n\r\n        this.selectedTiles = [];\r\n        this.tileGrid = new TileGrid(6, 6, 50, 50, 50, this.onTileSelect, this.onTileMatch, this.queue);\r\n        this.scoreDisplay = new ScoreDisplay(5, 5);\r\n        this.timer = new Timer(500, 5, 300);\r\n\r\n        this.tileGrid.create(this);\r\n        this.scoreDisplay.create(this);\r\n        this.timer.create(this);\r\n    }\r\n\r\n    update()\r\n    {\r\n        // Have we run out of time?\r\n        if(this.timer.seconds <= 0)\r\n        {\r\n            this.scene.start('GameOverScene', { score: this.score });\r\n            return;\r\n        }\r\n\r\n        // Are we currently executing a queued action?\r\n        if(this.queue.isActionRunning())\r\n        {\r\n            return;\r\n        }\r\n\r\n        // Do we have any queued actions on the stack?\r\n        if(this.queue.hasActions())\r\n        {\r\n            this.queue.next();\r\n            return;\r\n        }\r\n\r\n        // If nothing's left in the queue, we can move the game's state forward\r\n        this.tileGrid.update(this);\r\n    }\r\n\r\n    onTileSelect(context, tile)\r\n    {\r\n        // Are we currently executing a queued action?\r\n        if(context.queue.isActionRunning())\r\n        {\r\n            return;\r\n        }\r\n    \r\n        // Can we select this tile?\r\n        if(!context.tileGrid.canSelect(tile))\r\n        {\r\n            return;\r\n        }\r\n    \r\n        if(context.selectedTiles.length === 0)\r\n        {\r\n            context.selectedTiles.push(tile);\r\n            tile.activate();\r\n            return;\r\n        }\r\n    \r\n        if(context.selectedTiles.length === 1)\r\n        {\r\n            const selectedTile = context.selectedTiles[0];\r\n            const xDiff = Math.abs(selectedTile.tileGridX - tile.tileGridX);\r\n            const yDiff = Math.abs(selectedTile.tileGridY - tile.tileGridY);\r\n    \r\n            if((xDiff === 1 && yDiff === 0) || (xDiff === 0 && yDiff === 1))\r\n            {\r\n                context.selectedTiles.push(tile);\r\n    \r\n                let firstSelectedTile = context.selectedTiles[0];\r\n                let secondSelectedTile = context.selectedTiles[1];\r\n    \r\n                context.tileGrid.swapTiles(context, firstSelectedTile, secondSelectedTile);\r\n    \r\n                context.queue.push(() => {\r\n    \r\n                    // If there are no matches, swap the tiles back\r\n                    if(\r\n                        !context.tileGrid.hasMatches(firstSelectedTile.tileGridX, firstSelectedTile.tileGridY) &&\r\n                        !context.tileGrid.hasMatches(secondSelectedTile.tileGridX, secondSelectedTile.tileGridY)\r\n                    )\r\n                    {\r\n                        context.tileGrid.swapTiles(context, firstSelectedTile, secondSelectedTile);\r\n                    }\r\n    \r\n                    return Promise.resolve();\r\n    \r\n                });\r\n    \r\n                context.selectedTiles.forEach((tile) => { tile.deactivate(); });\r\n                context.selectedTiles = [];\r\n                \r\n                context.comboCount = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    onTileMatch(context, matchedTiles)\r\n    {\r\n        context.comboCount++;\r\n\r\n        context.score += (10 * context.comboCount);\r\n        context.scoreDisplay.updateScore(context.score);\r\n    }\r\n    \r\n}","export default class {\r\n\r\n    constructor()\r\n    {\r\n        this.queuedActions = [];\r\n        this.currentAction = null;\r\n    }\r\n\r\n    isActionRunning()\r\n    {\r\n        return this.currentAction != null;\r\n    }\r\n\r\n    hasActions()\r\n    {\r\n        return this.queuedActions.length > 0;\r\n    }\r\n\r\n    next()\r\n    {\r\n        this.currentAction = this.queuedActions.shift();\r\n        this.currentAction();\r\n    }\r\n\r\n    push(action)\r\n    {\r\n        var self = this;\r\n        self.queuedActions.push(() => { action().then(() => { self.currentAction = null; }) });\r\n    }\r\n\r\n}","import { getRandomItem } from './Utility';\r\nimport Tile from './Tile';\r\nimport TileGenerationBehavior from './TileGenerationBehavior';\r\nimport TileState from './TileState';\r\nimport TileType from './TileType';\r\n\r\nexport default class {\r\n\r\n    constructor(tileGridWidth, tileGridHeight, tileSize, offsetX, offsetY, onTileSelect, onTileMatch, queue)\r\n    {\r\n        this.offsetX = offsetX;\r\n        this.offsetY = offsetY;\r\n        this.tileSize = tileSize;\r\n        this.tileGridHeight = tileGridHeight;\r\n        this.tileGridWidth = tileGridWidth;\r\n        this.tileGrid = [];\r\n        this.tileImageContainer = null;\r\n        this.playAreaOffset = (this.tileGridHeight * this.tileSize);\r\n\r\n        this.onTileSelect = onTileSelect;\r\n        this.onTileMatch = onTileMatch;\r\n\r\n        this.queue = queue;\r\n\r\n        // We're going to generate a grid that's twice the height of\r\n        // the desired tile grid height since we'll use the hidden, upper\r\n        // region to stage the bricks that will fall into the play area\r\n        for(let y = 0; y < tileGridHeight * 2; y++)\r\n        {\r\n            this.tileGrid[y] = [];\r\n            for(let x = 0; x < tileGridWidth; x++)\r\n            {\r\n                this.tileGrid[y][x] = this.createTile(this.getTileType(x, y, TileGenerationBehavior.None), x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    create(context)\r\n    {\r\n        this.tileImageContainer = context.add.container();\r\n\r\n        // Create all of the tiles\r\n        this.forEachTile(tile => {\r\n            tile.create(context);\r\n            this.tileImageContainer.add(tile.image);\r\n        });\r\n\r\n        // Create a mask to only show the play area\r\n        const maskShape = context.make.graphics();\r\n        maskShape.fillStyle(0xffffff, 1);\r\n        maskShape.fillRect(this.offsetX/2, this.offsetY/2 + (this.tileGridHeight * this.tileSize), this.tileGridWidth * this.tileSize, this.tileGridHeight * this.tileSize);\r\n        \r\n        this.tileImageContainer.mask = new Phaser.Display.Masks.GeometryMask(context, maskShape);\r\n    }\r\n\r\n    update(context)\r\n    {\r\n        const self = this;\r\n\r\n        // Detect and destroy any matches\r\n        const matchedTiles = self.getMatches();\r\n\r\n        if(matchedTiles.length > 0)\r\n        {\r\n            self.onTileMatch(context, matchedTiles);\r\n        }\r\n\r\n        let destroys = [];\r\n        matchedTiles.forEach(t => { destroys.push(t.destroy(context, this.tileImageContainer)); });\r\n\r\n        if(destroys.length > 0)\r\n        {\r\n            self.queue.push(() => { return Promise.all(destroys); });\r\n        }\r\n\r\n        // Remove any destroyed tiles\r\n        self.forEachTile((tile, x, y) => {\r\n\r\n            if(tile.state === TileState.Destroyed)\r\n            {\r\n                self.tileGrid[y][x] = null;\r\n            }\r\n\r\n        });\r\n\r\n        // Shift all of the tiles downward to fill empty spots\r\n        let drops = [];\r\n        for(let x = 0; x < this.tileGridWidth; x++)\r\n        {\r\n            let y = (this.tileGridHeight * 2) - 1;\r\n            while(y >= 0)\r\n            {\r\n                // If the tile is null...\r\n                if(self.tileGrid[y][x] === null)\r\n                {\r\n                    // ...find the closest tile that's not null...\r\n                    let closestY = y - 1;\r\n                    while(closestY >= 0)\r\n                    {\r\n                        let closestTile = self.tileGrid[closestY][x];\r\n                        if(closestTile !== null)\r\n                        {\r\n                            // ...and shift it downward\r\n                            self.tileGrid[y][x] = closestTile;\r\n                            self.tileGrid[closestY][x] = null;\r\n                            drops.push(this.getTileDrop(context, closestTile, x, y));\r\n                            y--;\r\n                        }\r\n                        closestY--;\r\n                    }\r\n                }\r\n\r\n                y--;\r\n            }\r\n        }\r\n\r\n        // Fill in all of the empty tiles\r\n        self.forEachTile((tile, x, y) => {\r\n            if(tile === null)\r\n            {\r\n                const tile = self.createTile(self.getTileType(x, y, TileGenerationBehavior.EasyWin), x, y);\r\n                self.tileGrid[y][x] = tile;\r\n                tile.create(context);\r\n                self.tileImageContainer.add(tile.image);\r\n            }\r\n        });\r\n\r\n        if(drops.length > 0)\r\n        {\r\n            self.queue.push(() => { return Promise.all(drops); });\r\n        }\r\n    }\r\n\r\n    swapTiles(context, firstTile, secondTile)\r\n    {\r\n        let self = this;\r\n\r\n        self.queue.push(() => {\r\n            \r\n            let firstTileX = firstTile.x;\r\n            let firstTileY = firstTile.y;\r\n            let firstTileGridX = firstTile.tileGridX;\r\n            let firstTileGridY = firstTile.tileGridY;\r\n    \r\n            let secondTileX = secondTile.x;\r\n            let secondTileY = secondTile.y;\r\n            let secondTileGridX = secondTile.tileGridX;\r\n            let secondTileGridY = secondTile.tileGridY;\r\n    \r\n            let firstSwap = secondTile.updatePosition(context, firstTileX, firstTileY, firstTileGridX, firstTileGridY);\r\n            self.tileGrid[firstTileGridY][firstTileGridX] = secondTile;\r\n    \r\n            let secondSwap = firstTile.updatePosition(context, secondTileX, secondTileY, secondTileGridX, secondTileGridY);\r\n            self.tileGrid[secondTileGridY][secondTileGridX] = firstTile;\r\n\r\n            return Promise.all([firstSwap, secondSwap]);\r\n\r\n        });\r\n    }\r\n\r\n    hasMatches(targetGridX, targetGridY)\r\n    {\r\n        return this.getMatches(targetGridX, targetGridY).length > 0;\r\n    }\r\n\r\n    getMatches(targetGridX, targetGridY)\r\n    {\r\n        const self = this;\r\n        const matchedTiles = [];\r\n\r\n        self.forEachTile((tile, x, y) => {\r\n\r\n            if(\r\n                (typeof targetGridX !== 'undefined' && x !== targetGridX) &&\r\n                (typeof targetGridY !== 'undefined' && y !== targetGridY)\r\n              )\r\n            {\r\n                return;\r\n            }\r\n\r\n            if(!this.isPlayable(tile))\r\n            {\r\n                return;\r\n            }\r\n\r\n            const targetTileType = tile.tileType;\r\n            const matchedXTiles = [];\r\n            const matchedYTiles = [];\r\n\r\n            // Check for matches to the right\r\n            let currX = (x + 1);\r\n            while(currX < self.tileGridWidth)\r\n            {\r\n                const currTile = self.tileGrid[y][currX];\r\n\r\n                if(currTile != null && targetTileType.name === currTile.tileType.name)\r\n                {\r\n                    matchedXTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currX++;\r\n            }\r\n\r\n            // Check for matches to the left\r\n            currX = (x - 1);\r\n            while(currX > 0)\r\n            {\r\n                const currTile = self.tileGrid[y][currX];\r\n\r\n                if(currTile != null && targetTileType.name === currTile.tileType.name)\r\n                {\r\n                    matchedXTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currX--;\r\n            }\r\n\r\n            // Check matches downwards\r\n            let currY = (y + 1);\r\n            while(currY < self.tileGridHeight)\r\n            {\r\n                const currTile = self.tileGrid[currY][x];\r\n\r\n                if(currTile != null && targetTileType.name === currTile.tileType.name)\r\n                {\r\n                    matchedYTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currY++;\r\n            }\r\n\r\n            // Check matches upwards\r\n            currY = (y - 1);\r\n            while(currY > 0)\r\n            {\r\n                const currTile = self.tileGrid[currY][x];\r\n\r\n                if(currTile != null && targetTileType === currTile.tileType)\r\n                {\r\n                    matchedYTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currY--;\r\n            }\r\n            \r\n            if(matchedYTiles.length > 1)\r\n            {\r\n                matchedTiles.push(...matchedYTiles);\r\n            }\r\n            \r\n            if(matchedXTiles.length > 1)\r\n            {\r\n                matchedTiles.push(...matchedXTiles);\r\n            }\r\n\r\n            if(matchedYTiles.length > 1 || matchedXTiles.length > 1)\r\n            {\r\n                matchedTiles.push(tile);\r\n            }\r\n        });\r\n\r\n        return matchedTiles;\r\n    }\r\n\r\n    forEachTile(callback)\r\n    {\r\n        for(let y = 0; y < this.tileGridHeight * 2; y++)\r\n        {\r\n            for(let x = 0; x < this.tileGridWidth; x++)\r\n            {\r\n                const currTile = this.tileGrid[y][x];\r\n                callback(this.tileGrid[y][x], x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    createTile(tileType, x, y)\r\n    {\r\n        return new Tile(tileType, this.getTileX(x), this.getTileY(y), x, y, this.onTileSelect);\r\n    }\r\n\r\n    getTileDrop(context, tile, x, y)\r\n    {\r\n        return tile.updatePosition(context, this.getTileX(x), this.getTileY(y), x, y);\r\n    }\r\n\r\n    getTileX(x)\r\n    {\r\n        return this.offsetX + (this.tileSize * x);\r\n    }\r\n\r\n    getTileY(y)\r\n    {\r\n        //return this.offsetY + (this.tileSize * y) - this.playAreaOffset;\r\n        return this.offsetY + (this.tileSize * y);\r\n    }\r\n\r\n    canSelect(tile)\r\n    {\r\n        return this.isPlayable(tile);\r\n    }\r\n\r\n    isPlayable(tile)\r\n    {\r\n        return (tile.tileGridY > (this.tileGridHeight - 1));\r\n    }\r\n\r\n    getTileType(x, y, behavior)\r\n    {\r\n        const aboveTile = (y < 1) ? null : this.tileGrid[y - 1][x];\r\n        const leftTile = (x < 1) ? null : this.tileGrid[y][x - 1];\r\n\r\n        if(behavior == TileGenerationBehavior.EasyWin && (aboveTile != null || leftTile != null))\r\n        {\r\n            return getRandomItem([aboveTile, leftTile].filter(t => t != null).map(t => t.tileType));\r\n        }\r\n        else\r\n        {\r\n            return getRandomItem(TileType.filter(t =>\r\n                (aboveTile === null || t.name !== aboveTile.tileType.name) &&\r\n                (leftTile === null || t.name !== leftTile.tileType.name)\r\n            ));\r\n        }\r\n    }\r\n}","import TileState from './TileState';\r\n\r\nexport default class {\r\n\r\n    constructor(tileType, x, y, tileGridX, tileGridY, onTileSelect)\r\n    {\r\n        this.tileType = tileType;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.tileGridX = tileGridX;\r\n        this.tileGridY = tileGridY;\r\n        this.onTileSelect = onTileSelect;\r\n        this.image = null;\r\n        this.state = TileState.Active;\r\n    }\r\n\r\n    create(context)\r\n    {\r\n        this.image = context.add.image(this.x, this.y, this.tileType.imageKey);\r\n        this.image.setInteractive();\r\n        this.image.on('pointerdown', () => { this.onTileSelect(context, this); });\r\n    }\r\n\r\n    activate()\r\n    {\r\n        this.image.setTintFill(0xffffff);\r\n    }\r\n\r\n    deactivate()\r\n    {\r\n        this.image.clearTint();\r\n    }\r\n\r\n    updatePosition(context, x, y, tileGridX, tileGridY)\r\n    {\r\n        let self = this;\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            self.x = x;\r\n            self.y = y;\r\n            self.tileGridX = tileGridX;\r\n            self.tileGridY = tileGridY;\r\n\r\n            context.tweens.add({\r\n                targets: self.image,\r\n                x: x,\r\n                y: y,\r\n                ease: 'Power1',\r\n                duration: 500,\r\n                onComplete: () => { resolve() }\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    destroy(context, container)\r\n    {\r\n        let self = this;\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            context.tweens.add({\r\n                targets: self.image,\r\n                alpha: 0,\r\n                ease: 'Power1',\r\n                duration: 500,\r\n                onComplete: () => {\r\n\r\n                    container.remove(self.image);\r\n                    self.image.destroy();\r\n                    self.state = TileState.Destroyed;\r\n                    resolve();\r\n\r\n                }\r\n            });\r\n\r\n        });\r\n    }\r\n}","export default class {\r\n\r\n    constructor(x, y)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.text = null;\r\n        this.score = 0;\r\n    }\r\n\r\n    create(context)\r\n    {\r\n        this.text = context.add.text(this.x, this.y, this.score);\r\n    }\r\n\r\n    updateScore(score)\r\n    {\r\n        this.score = score;\r\n        this.text.setText(score);\r\n    }\r\n}","export default class {\r\n\r\n    constructor(x, y, seconds)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.text = null;\r\n        this.seconds = seconds;\r\n    }\r\n\r\n    create(context)\r\n    {\r\n        this.text = context.add.text(this.x, this.y, this.score);\r\n        \r\n        this.tick();\r\n        context.time.addEvent({ delay: 1000, callback: this.tick, callbackScope: this, loop: true })\r\n    }\r\n\r\n    tick()\r\n    {\r\n        if(this.seconds <= 0)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.seconds--;\r\n\r\n        // Display the remaining time\r\n        const minutes = Math.floor(this.seconds / 60);\r\n\r\n        let seconds = (this.seconds % 60);\r\n        if(seconds < 10)\r\n        {\r\n            seconds = '0' + seconds;\r\n        }\r\n\r\n        this.text.setText(`${minutes}:${seconds}`);\r\n    }\r\n}","export default class extends Phaser.Scene {\r\n\r\n    constructor()\r\n    {\r\n        super('GameOverScene');\r\n\r\n        this.finalScore = 0;\r\n    }\r\n\r\n    init(data)\r\n    {\r\n        this.finalScore = data.score;\r\n    }\r\n\r\n    create()\r\n    {\r\n        this.add.text(50, 50, 'Game Over!');\r\n        this.add.text(50, 100, `Final Score: ${this.finalScore}`);\r\n        this.time.addEvent({ delay: 1000, callback: function() { this.scene.start('TitleScene') }, callbackScope: this })\r\n    }\r\n    \r\n}"],"sourceRoot":""}