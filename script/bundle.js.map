{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./script/scenes/TitleScene.js","webpack:///./script/Utility.js","webpack:///./script/TileState.js","webpack:///./script/TileGenerationBehavior.js","webpack:///./script/TileType.js","webpack:///./script/scenes/RoundScene.js","webpack:///./script/ActionQueue.js","webpack:///./script/TileGrid.js","webpack:///./script/Tile.js","webpack:///./script/ScoreDisplay.js","webpack:///./script/Timer.js","webpack:///./script/scenes/GameOverScene.js","webpack:///./script/main.js"],"names":["enumerable","get","getter","value","key","bind","module","Object","prototype","hasOwnProperty","call","object","property","super","this","add","text","time","addEvent","delay","callback","scene","start","callbackScope","getRandomItem","items","Math","floor","random","length","name","imageKey","score","queue","selectedTiles","tileGrid","scoreDisplay","timer","comboCount","load","image","queuedActions","currentAction","shift","action","self","push","then","tileGridWidth","tileGridHeight","tileSize","offsetX","offsetY","onTileSelect","onTileMatch","tileImageContainer","playAreaOffset","y","x","createTile","getTileType","TileGenerationBehavior","context","container","forEachTile","tile","create","matchedTiles","getMatches","destroys","forEach","t","destroy","Promise","all","state","TileState","drops","closestY","closestTile","getTileDrop","firstTile","secondTile","firstTileX","firstTileY","firstTileGridX","tileGridX","firstTileGridY","tileGridY","secondTileX","secondTileY","secondTileGridX","secondTileGridY","firstSwap","updatePosition","secondSwap","targetGridX","targetGridY","isPlayable","targetTileType","tileType","matchedXTiles","matchedYTiles","currX","currTile","currY","setInteractive","on","setTintFill","clearTint","resolve","reject","tweens","targets","ease","duration","onComplete","alpha","remove","getTileX","getTileY","behavior","aboveTile","leftTile","TileType","filter","map","setText","seconds","tick","loop","minutes","isActionRunning","hasActions","next","update","canSelect","activate","selectedTile","xDiff","abs","yDiff","firstSelectedTile","secondSelectedTile","swapTiles","hasMatches","deactivate","updateScore","finalScore","data","config","type","Phaser","AUTO","width","height","TitleScene","RoundScene","GameOverScene","Game"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default class extends Phaser.Scene {\r\n\r\n    constructor()\r\n    {\r\n        super('TitleScene');\r\n    }\r\n\r\n    create()\r\n    {\r\n        this.add.text(50, 50, 'Match Three!');\r\n        this.time.addEvent({ delay: 1000, callback: function() { this.scene.start('RoundScene') }, callbackScope: this })\r\n    }\r\n    \r\n}","// Source: https://stackoverflow.com/questions/5915096/get-random-item-from-javascript-array\r\nconst getRandomItem = (items) => {\r\n    return items[Math.floor(Math.random() * items.length)];\r\n}\r\n\r\nexport {\r\n    getRandomItem\r\n}","export default {\r\n    Active: 0,\r\n    Destroyed: 1\r\n};","export default {\r\n    None: 0,\r\n    EasyWin: 1\r\n};","export default [\r\n    { name: 'Blue', imageKey: 'tile_01' },\r\n    { name: 'Green', imageKey: 'tile_02' },\r\n    { name: 'Red', imageKey: 'tile_03' },\r\n    { name: 'Yellow', imageKey: 'tile_04' }\r\n];","import ActionQueue from '../ActionQueue';\r\nimport ScoreDisplay from '../ScoreDisplay';\r\nimport TileGrid from '../TileGrid';\r\nimport Timer from '../Timer';\r\n\r\nexport default class extends Phaser.Scene {\r\n\r\n    constructor()\r\n    {\r\n        super('RoundScene');\r\n\r\n        this.score = null;\r\n        this.queue = null;\r\n        this.selectedTiles = null;\r\n        this.tileGrid = null;\r\n        this.scoreDisplay = null;\r\n        this.timer = null;\r\n        this.comboCount = null;\r\n    }\r\n\r\n    preload()\r\n    {\r\n        this.load.image('tile_01', 'assets/tile_01.png');\r\n        this.load.image('tile_02', 'assets/tile_02.png');\r\n        this.load.image('tile_03', 'assets/tile_03.png');\r\n        this.load.image('tile_04', 'assets/tile_04.png');\r\n    }\r\n\r\n    create()\r\n    {\r\n        this.score = 0;\r\n        this.comboCount = 0;\r\n\r\n        this.queue = new ActionQueue();\r\n\r\n        this.selectedTiles = [];\r\n        this.tileGrid = new TileGrid(6, 6, 50, 50, 50, this.onTileSelect, this.onTileMatch, this.queue);\r\n        this.scoreDisplay = new ScoreDisplay(5, 5);\r\n        this.timer = new Timer(500, 5, 300);\r\n\r\n        this.tileGrid.create(this);\r\n        this.scoreDisplay.create(this);\r\n        this.timer.create(this);\r\n    }\r\n\r\n    update()\r\n    {\r\n        // Have we run out of time?\r\n        if(this.timer.seconds <= 0)\r\n        {\r\n            this.scene.start('GameOverScene', { score: this.score });\r\n            return;\r\n        }\r\n\r\n        // Are we currently executing a queued action?\r\n        if(this.queue.isActionRunning())\r\n        {\r\n            return;\r\n        }\r\n\r\n        // Do we have any queued actions on the stack?\r\n        if(this.queue.hasActions())\r\n        {\r\n            this.queue.next();\r\n            return;\r\n        }\r\n\r\n        // If nothing's left in the queue, we can move the game's state forward\r\n        this.tileGrid.update(this);\r\n    }\r\n\r\n    onTileSelect(context, tile)\r\n    {\r\n        // Are we currently executing a queued action?\r\n        if(context.queue.isActionRunning())\r\n        {\r\n            return;\r\n        }\r\n    \r\n        // Can we select this tile?\r\n        if(!context.tileGrid.canSelect(tile))\r\n        {\r\n            return;\r\n        }\r\n    \r\n        if(context.selectedTiles.length === 0)\r\n        {\r\n            context.selectedTiles.push(tile);\r\n            tile.activate();\r\n            return;\r\n        }\r\n    \r\n        if(context.selectedTiles.length === 1)\r\n        {\r\n            const selectedTile = context.selectedTiles[0];\r\n            const xDiff = Math.abs(selectedTile.tileGridX - tile.tileGridX);\r\n            const yDiff = Math.abs(selectedTile.tileGridY - tile.tileGridY);\r\n    \r\n            if((xDiff === 1 && yDiff === 0) || (xDiff === 0 && yDiff === 1))\r\n            {\r\n                context.selectedTiles.push(tile);\r\n    \r\n                let firstSelectedTile = context.selectedTiles[0];\r\n                let secondSelectedTile = context.selectedTiles[1];\r\n    \r\n                context.tileGrid.swapTiles(context, firstSelectedTile, secondSelectedTile);\r\n    \r\n                context.queue.push(() => {\r\n    \r\n                    // If there are no matches, swap the tiles back\r\n                    if(\r\n                        !context.tileGrid.hasMatches(firstSelectedTile.tileGridX, firstSelectedTile.tileGridY) &&\r\n                        !context.tileGrid.hasMatches(secondSelectedTile.tileGridX, secondSelectedTile.tileGridY)\r\n                    )\r\n                    {\r\n                        context.tileGrid.swapTiles(context, firstSelectedTile, secondSelectedTile);\r\n                    }\r\n    \r\n                    return Promise.resolve();\r\n    \r\n                });\r\n    \r\n                context.selectedTiles.forEach((tile) => { tile.deactivate(); });\r\n                context.selectedTiles = [];\r\n                \r\n                context.comboCount = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    onTileMatch(context, matchedTiles)\r\n    {\r\n        context.comboCount++;\r\n\r\n        context.score += (10 * context.comboCount);\r\n        context.scoreDisplay.updateScore(context.score);\r\n    }\r\n    \r\n}","export default class {\r\n\r\n    constructor()\r\n    {\r\n        this.queuedActions = [];\r\n        this.currentAction = null;\r\n    }\r\n\r\n    isActionRunning()\r\n    {\r\n        return this.currentAction != null;\r\n    }\r\n\r\n    hasActions()\r\n    {\r\n        return this.queuedActions.length > 0;\r\n    }\r\n\r\n    next()\r\n    {\r\n        this.currentAction = this.queuedActions.shift();\r\n        this.currentAction();\r\n    }\r\n\r\n    push(action)\r\n    {\r\n        var self = this;\r\n        self.queuedActions.push(() => { action().then(() => { self.currentAction = null; }) });\r\n    }\r\n\r\n}","import { getRandomItem } from './Utility';\r\nimport Tile from './Tile';\r\nimport TileGenerationBehavior from './TileGenerationBehavior';\r\nimport TileState from './TileState';\r\nimport TileType from './TileType';\r\n\r\nexport default class {\r\n\r\n    constructor(tileGridWidth, tileGridHeight, tileSize, offsetX, offsetY, onTileSelect, onTileMatch, queue)\r\n    {\r\n        this.offsetX = offsetX;\r\n        this.offsetY = offsetY;\r\n        this.tileSize = tileSize;\r\n        this.tileGridHeight = tileGridHeight;\r\n        this.tileGridWidth = tileGridWidth;\r\n        this.tileGrid = [];\r\n        this.tileImageContainer = null;\r\n        this.playAreaOffset = (this.tileGridHeight * this.tileSize);\r\n\r\n        this.onTileSelect = onTileSelect;\r\n        this.onTileMatch = onTileMatch;\r\n\r\n        this.queue = queue;\r\n\r\n        // We're going to generate a grid that's twice the height of\r\n        // the desired tile grid height since we'll use the hidden, upper\r\n        // region to stage the bricks that will fall into the play area\r\n        for(let y = 0; y < tileGridHeight * 2; y++)\r\n        {\r\n            this.tileGrid[y] = [];\r\n            for(let x = 0; x < tileGridWidth; x++)\r\n            {\r\n                this.tileGrid[y][x] = (y < tileGridHeight)\r\n                    ? null\r\n                    : this.createTile(this.getTileType(x, y, TileGenerationBehavior.None), x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    create(context)\r\n    {\r\n        this.tileImageContainer = context.add.container();\r\n\r\n        // Create all of the tiles\r\n        this.forEachTile(tile => {\r\n\r\n            if(tile === null)\r\n            {\r\n                return;\r\n            }\r\n\r\n            tile.create(context);\r\n            this.tileImageContainer.add(tile.image);\r\n\r\n        });\r\n\r\n        // Create a mask to only show the play area\r\n        //const maskShape = context.make.graphics();\r\n        //maskShape.fillStyle(0xffffff, 1);\r\n        //maskShape.fillRect(this.offsetX/2, this.offsetY/2 + (this.tileGridHeight * this.tileSize), this.tileGridWidth * this.tileSize, this.tileGridHeight * this.tileSize);\r\n        \r\n        //this.tileImageContainer.mask = new Phaser.Display.Masks.GeometryMask(context, maskShape);\r\n    }\r\n\r\n    update(context)\r\n    {\r\n        const self = this;\r\n\r\n        // Detect and destroy any matches\r\n        const matchedTiles = self.getMatches();\r\n\r\n        if(matchedTiles.length > 0)\r\n        {\r\n            self.onTileMatch(context, matchedTiles);\r\n        }\r\n\r\n        let destroys = [];\r\n        matchedTiles.forEach(t => { destroys.push(t.destroy(context, this.tileImageContainer)); });\r\n\r\n        if(destroys.length > 0)\r\n        {\r\n            self.queue.push(() => { return Promise.all(destroys); });\r\n        }\r\n\r\n        // Remove any destroyed tiles\r\n        self.forEachTile((tile, x, y) => {\r\n\r\n            if(tile === null)\r\n            {\r\n                return;\r\n            }\r\n\r\n            if(tile.state === TileState.Destroyed)\r\n            {\r\n                self.tileGrid[y][x] = null;\r\n            }\r\n\r\n        });\r\n\r\n        // Shift all of the tiles downward to fill empty spots\r\n        let drops = [];\r\n        for(let x = 0; x < this.tileGridWidth; x++)\r\n        {\r\n            let y = (this.tileGridHeight * 2) - 1;\r\n            while(y >= 0)\r\n            {\r\n                // If the tile is null...\r\n                if(self.tileGrid[y][x] === null)\r\n                {\r\n                    // ...find the closest tile that's not null...\r\n                    let closestY = y - 1;\r\n                    while(closestY >= 0)\r\n                    {\r\n                        let closestTile = self.tileGrid[closestY][x];\r\n                        if(closestTile !== null)\r\n                        {\r\n                            // ...and shift it downward\r\n                            self.tileGrid[y][x] = closestTile;\r\n                            self.tileGrid[closestY][x] = null;\r\n                            drops.push(this.getTileDrop(context, closestTile, x, y));\r\n                            y--;\r\n                        }\r\n                        closestY--;\r\n                    }\r\n                }\r\n\r\n                y--;\r\n            }\r\n        }\r\n\r\n        // Fill in all of the empty tiles\r\n        /*\r\n        self.forEachTile((tile, x, y) => {\r\n            if(tile === null)\r\n            {\r\n                const tile = self.createTile(self.getTileType(x, y, TileGenerationBehavior.EasyWin), x, y);\r\n                self.tileGrid[y][x] = tile;\r\n                tile.create(context);\r\n                self.tileImageContainer.add(tile.image);\r\n            }\r\n        });\r\n        */\r\n\r\n        if(drops.length > 0)\r\n        {\r\n            self.queue.push(() => { return Promise.all(drops); });\r\n        }\r\n    }\r\n\r\n    swapTiles(context, firstTile, secondTile)\r\n    {\r\n        let self = this;\r\n\r\n        self.queue.push(() => {\r\n            \r\n            let firstTileX = firstTile.x;\r\n            let firstTileY = firstTile.y;\r\n            let firstTileGridX = firstTile.tileGridX;\r\n            let firstTileGridY = firstTile.tileGridY;\r\n    \r\n            let secondTileX = secondTile.x;\r\n            let secondTileY = secondTile.y;\r\n            let secondTileGridX = secondTile.tileGridX;\r\n            let secondTileGridY = secondTile.tileGridY;\r\n    \r\n            let firstSwap = secondTile.updatePosition(context, firstTileX, firstTileY, firstTileGridX, firstTileGridY);\r\n            self.tileGrid[firstTileGridY][firstTileGridX] = secondTile;\r\n    \r\n            let secondSwap = firstTile.updatePosition(context, secondTileX, secondTileY, secondTileGridX, secondTileGridY);\r\n            self.tileGrid[secondTileGridY][secondTileGridX] = firstTile;\r\n\r\n            return Promise.all([firstSwap, secondSwap]);\r\n\r\n        });\r\n    }\r\n\r\n    hasMatches(targetGridX, targetGridY)\r\n    {\r\n        return this.getMatches(targetGridX, targetGridY).length > 0;\r\n    }\r\n\r\n    getMatches(targetGridX, targetGridY)\r\n    {\r\n        const self = this;\r\n        const matchedTiles = [];\r\n\r\n        self.forEachTile((tile, x, y) => {\r\n\r\n            if(\r\n                (typeof targetGridX !== 'undefined' && x !== targetGridX) &&\r\n                (typeof targetGridY !== 'undefined' && y !== targetGridY)\r\n              )\r\n            {\r\n                return;\r\n            }\r\n\r\n            if(!this.isPlayable(tile))\r\n            {\r\n                return;\r\n            }\r\n\r\n            const targetTileType = tile.tileType;\r\n            const matchedXTiles = [];\r\n            const matchedYTiles = [];\r\n\r\n            // Check for matches to the right\r\n            let currX = (x + 1);\r\n            while(currX < self.tileGridWidth)\r\n            {\r\n                const currTile = self.tileGrid[y][currX];\r\n\r\n                if(currTile != null && targetTileType.name === currTile.tileType.name)\r\n                {\r\n                    matchedXTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currX++;\r\n            }\r\n\r\n            // Check for matches to the left\r\n            currX = (x - 1);\r\n            while(currX > 0)\r\n            {\r\n                const currTile = self.tileGrid[y][currX];\r\n\r\n                if(currTile != null && targetTileType.name === currTile.tileType.name)\r\n                {\r\n                    matchedXTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currX--;\r\n            }\r\n\r\n            // Check matches downwards\r\n            let currY = (y + 1);\r\n            while(currY < self.tileGridHeight)\r\n            {\r\n                const currTile = self.tileGrid[currY][x];\r\n\r\n                if(currTile != null && targetTileType.name === currTile.tileType.name)\r\n                {\r\n                    matchedYTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currY++;\r\n            }\r\n\r\n            // Check matches upwards\r\n            currY = (y - 1);\r\n            while(currY > 0)\r\n            {\r\n                const currTile = self.tileGrid[currY][x];\r\n\r\n                if(currTile != null && targetTileType === currTile.tileType)\r\n                {\r\n                    matchedYTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currY--;\r\n            }\r\n            \r\n            if(matchedYTiles.length > 1)\r\n            {\r\n                matchedTiles.push(...matchedYTiles);\r\n            }\r\n            \r\n            if(matchedXTiles.length > 1)\r\n            {\r\n                matchedTiles.push(...matchedXTiles);\r\n            }\r\n\r\n            if(matchedYTiles.length > 1 || matchedXTiles.length > 1)\r\n            {\r\n                matchedTiles.push(tile);\r\n            }\r\n        });\r\n\r\n        return matchedTiles;\r\n    }\r\n\r\n    forEachTile(callback)\r\n    {\r\n        for(let y = 0; y < this.tileGridHeight * 2; y++)\r\n        {\r\n            for(let x = 0; x < this.tileGridWidth; x++)\r\n            {\r\n                const currTile = this.tileGrid[y][x];\r\n                callback(this.tileGrid[y][x], x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    createTile(tileType, x, y)\r\n    {\r\n        return new Tile(tileType, this.getTileX(x), this.getTileY(y), x, y, this.onTileSelect);\r\n    }\r\n\r\n    getTileDrop(context, tile, x, y)\r\n    {\r\n        return tile.updatePosition(context, this.getTileX(x), this.getTileY(y), x, y);\r\n    }\r\n\r\n    getTileX(x)\r\n    {\r\n        return this.offsetX + (this.tileSize * x);\r\n    }\r\n\r\n    getTileY(y)\r\n    {\r\n        //return this.offsetY + (this.tileSize * y) - this.playAreaOffset;\r\n        return this.offsetY + (this.tileSize * y);\r\n    }\r\n\r\n    canSelect(tile)\r\n    {\r\n        return this.isPlayable(tile);\r\n    }\r\n\r\n    isPlayable(tile)\r\n    {\r\n        return (tile != null) && (tile.tileGridY > (this.tileGridHeight - 1));\r\n    }\r\n\r\n    getTileType(x, y, behavior)\r\n    {\r\n        const aboveTile = (y < 1) ? null : this.tileGrid[y - 1][x];\r\n        const leftTile = (x < 1) ? null : this.tileGrid[y][x - 1];\r\n\r\n        if(behavior == TileGenerationBehavior.EasyWin && (aboveTile != null || leftTile != null))\r\n        {\r\n            return getRandomItem([aboveTile, leftTile].filter(t => t != null).map(t => t.tileType));\r\n        }\r\n        else\r\n        {\r\n            return getRandomItem(TileType.filter(t =>\r\n                (aboveTile === null || t.name !== aboveTile.tileType.name) &&\r\n                (leftTile === null || t.name !== leftTile.tileType.name)\r\n            ));\r\n        }\r\n    }\r\n}","import TileState from './TileState';\r\n\r\nexport default class {\r\n\r\n    constructor(tileType, x, y, tileGridX, tileGridY, onTileSelect)\r\n    {\r\n        this.tileType = tileType;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.tileGridX = tileGridX;\r\n        this.tileGridY = tileGridY;\r\n        this.onTileSelect = onTileSelect;\r\n        this.image = null;\r\n        this.state = TileState.Active;\r\n    }\r\n\r\n    create(context)\r\n    {\r\n        this.image = context.add.image(this.x, this.y, this.tileType.imageKey);\r\n        this.image.setInteractive();\r\n        this.image.on('pointerdown', () => { this.onTileSelect(context, this); });\r\n    }\r\n\r\n    activate()\r\n    {\r\n        this.image.setTintFill(0xffffff);\r\n    }\r\n\r\n    deactivate()\r\n    {\r\n        this.image.clearTint();\r\n    }\r\n\r\n    updatePosition(context, x, y, tileGridX, tileGridY)\r\n    {\r\n        let self = this;\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            self.x = x;\r\n            self.y = y;\r\n            self.tileGridX = tileGridX;\r\n            self.tileGridY = tileGridY;\r\n\r\n            context.tweens.add({\r\n                targets: self.image,\r\n                x: x,\r\n                y: y,\r\n                ease: 'Power1',\r\n                duration: 500,\r\n                onComplete: () => { resolve() }\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    destroy(context, container)\r\n    {\r\n        let self = this;\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            context.tweens.add({\r\n                targets: self.image,\r\n                alpha: 0,\r\n                ease: 'Power1',\r\n                duration: 500,\r\n                onComplete: () => {\r\n\r\n                    container.remove(self.image);\r\n                    self.image.destroy();\r\n                    self.state = TileState.Destroyed;\r\n                    resolve();\r\n\r\n                }\r\n            });\r\n\r\n        });\r\n    }\r\n}","export default class {\r\n\r\n    constructor(x, y)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.text = null;\r\n        this.score = 0;\r\n    }\r\n\r\n    create(context)\r\n    {\r\n        this.text = context.add.text(this.x, this.y, this.score);\r\n    }\r\n\r\n    updateScore(score)\r\n    {\r\n        this.score = score;\r\n        this.text.setText(score);\r\n    }\r\n}","export default class {\r\n\r\n    constructor(x, y, seconds)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.text = null;\r\n        this.seconds = seconds;\r\n    }\r\n\r\n    create(context)\r\n    {\r\n        this.text = context.add.text(this.x, this.y, this.score);\r\n        \r\n        this.tick();\r\n        context.time.addEvent({ delay: 1000, callback: this.tick, callbackScope: this, loop: true })\r\n    }\r\n\r\n    tick()\r\n    {\r\n        if(this.seconds <= 0)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.seconds--;\r\n\r\n        // Display the remaining time\r\n        const minutes = Math.floor(this.seconds / 60);\r\n\r\n        let seconds = (this.seconds % 60);\r\n        if(seconds < 10)\r\n        {\r\n            seconds = '0' + seconds;\r\n        }\r\n\r\n        this.text.setText(`${minutes}:${seconds}`);\r\n    }\r\n}","export default class extends Phaser.Scene {\r\n\r\n    constructor()\r\n    {\r\n        super('GameOverScene');\r\n\r\n        this.finalScore = 0;\r\n    }\r\n\r\n    init(data)\r\n    {\r\n        this.finalScore = data.score;\r\n    }\r\n\r\n    create()\r\n    {\r\n        this.add.text(50, 50, 'Game Over!');\r\n        this.add.text(50, 100, `Final Score: ${this.finalScore}`);\r\n        this.time.addEvent({ delay: 1000, callback: function() { this.scene.start('TitleScene') }, callbackScope: this })\r\n    }\r\n    \r\n}","import TitleScene from './scenes/TitleScene';\r\nimport RoundScene from './scenes/RoundScene';\r\nimport GameOverScene from './scenes/GameOverScene';\r\n\r\nconst config = {\r\n    type: Phaser.AUTO,\r\n    width: 800,\r\n    height: 1200, // 600\r\n    scene: [TitleScene, RoundScene, GameOverScene]\r\n};\r\n\r\nconst game = new Phaser.Game(config);"],"sourceRoot":""}