{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./script/Utility.js","webpack:///./script/TileState.js","webpack:///./script/Tile.js","webpack:///./script/TileType.js","webpack:///./script/main.js","webpack:///./script/ActionQueue.js","webpack:///./script/TileGrid.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","getRandomItem","items","Math","floor","random","length","TileState","Tile","[object Object]","tileType","x","y","tileGridX","tileGridY","onTileSelect","this","image","state","context","add","imageKey","setInteractive","on","setTintFill","clearTint","self","Promise","resolve","reject","tweens","targets","ease","duration","onComplete","alpha","destroy","TileType","config","type","Phaser","AUTO","width","height","scene","preload","load","tileGrid","update","main_queue","isActionRunning","hasActions","next","Game","queuedActions","currentAction","shift","action","push","then","selectedTiles","tileWidth","tileHeight","offsetX","offsetY","queue","aboveTile","leftTile","filter","forEachTile","tile","matchedTiles","getMatches","destroys","forEach","all","bottomEmptyTiles","otherEmptyTile","find","e","drops","closestTile","closestTileY","currY","updatePosition","firstTile","secondTile","firstTileX","firstTileY","firstTileGridX","firstTileGridY","secondTileX","secondTileY","secondTileGridX","secondTileGridY","firstSwap","secondSwap","targetGridX","targetGridY","targetTileType","matchedXTiles","matchedYTiles","currX","currTile","callback","activate","selectedTile","xDiff","abs","yDiff","firstSelectedTile","secondSelectedTile","swapTiles","hasMatches","deactivate"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// Source: https://stackoverflow.com/questions/5915096/get-random-item-from-javascript-array\r\nconst getRandomItem = (items) => {\r\n    return items[Math.floor(Math.random() * items.length)];\r\n}\r\n\r\nexport {\r\n    getRandomItem\r\n}","export default {\r\n    Active: 0,\r\n    Destroyed: 1\r\n};","import TileState from './TileState';\r\n\r\nexport default class {\r\n\r\n    constructor(tileType, x, y, tileGridX, tileGridY, onTileSelect)\r\n    {\r\n        this.tileType = tileType;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.tileGridX = tileGridX;\r\n        this.tileGridY = tileGridY;\r\n        this.onTileSelect = onTileSelect;\r\n        this.image = null;\r\n        this.state = TileState.Active;\r\n    }\r\n\r\n    create(context)\r\n    {\r\n        this.image = context.add.image(this.x, this.y, this.tileType.imageKey);\r\n        this.image.setInteractive();\r\n        this.image.on('pointerdown', () => { this.onTileSelect(context, this); });\r\n    }\r\n\r\n    activate()\r\n    {\r\n        this.image.setTintFill(0xffffff);\r\n    }\r\n\r\n    deactivate()\r\n    {\r\n        this.image.clearTint();\r\n    }\r\n\r\n    updatePosition(context, x, y, tileGridX, tileGridY)\r\n    {\r\n        let self = this;\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            self.x = x;\r\n            self.y = y;\r\n            self.tileGridX = tileGridX;\r\n            self.tileGridY = tileGridY;\r\n\r\n            context.tweens.add({\r\n                targets: self.image,\r\n                x: x,\r\n                y: y,\r\n                ease: 'Power1',\r\n                duration: 500,\r\n                onComplete: () => { resolve() }\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    destroy(context)\r\n    {\r\n        let self = this;\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            context.tweens.add({\r\n                targets: self.image,\r\n                alpha: 0,\r\n                ease: 'Power1',\r\n                duration: 500,\r\n                onComplete: () => {\r\n\r\n                    self.image.destroy();\r\n                    self.state = TileState.Destroyed;\r\n                    resolve();\r\n\r\n                }\r\n            });\r\n\r\n        });\r\n    }\r\n}","export default [\r\n    { name: 'Blue', imageKey: 'tile_01' },\r\n    { name: 'Green', imageKey: 'tile_02' },\r\n    { name: 'Red', imageKey: 'tile_03' },\r\n    { name: 'Yellow', imageKey: 'tile_04' }\r\n];","import TileGrid from './TileGrid';\r\nimport ActionQueue from './ActionQueue';\r\n\r\nconst config = {\r\n    type: Phaser.AUTO,\r\n    width: 800,\r\n    height: 600,\r\n    scene: {\r\n        preload: preload,\r\n        create: create,\r\n        update: update\r\n    }\r\n};\r\n\r\nconst game = new Phaser.Game(config);\r\nconst queue = new ActionQueue();\r\n\r\nlet selectedTiles = [];\r\nconst tileGrid = new TileGrid(10, 10, 50, 50, onTileSelect, queue);\r\n\r\nfunction preload()\r\n{\r\n    this.load.image('tile_01', 'assets/tile_01.png');\r\n    this.load.image('tile_02', 'assets/tile_02.png');\r\n    this.load.image('tile_03', 'assets/tile_03.png');\r\n    this.load.image('tile_04', 'assets/tile_04.png');\r\n}\r\n\r\nfunction create()\r\n{\r\n    tileGrid.create(this);\r\n}\r\n\r\nfunction update()\r\n{\r\n    // Are we currently executing a queued action?\r\n    if(queue.isActionRunning())\r\n    {\r\n        return;\r\n    }\r\n\r\n    // Do we have any queued actions on the stack?\r\n    if(queue.hasActions())\r\n    {\r\n        queue.next();\r\n        return;\r\n    }\r\n\r\n    // If nothing's left in the queue, we can move the game's state forward\r\n    tileGrid.update(this);\r\n}\r\n\r\nfunction onTileSelect(context, tile) {\r\n\r\n    // Are we currently executing a queued action?\r\n    if(queue.isActionRunning())\r\n    {\r\n        return;\r\n    }\r\n\r\n    if(selectedTiles.length === 0)\r\n    {\r\n        selectedTiles.push(tile);\r\n        tile.activate();\r\n        return;\r\n    }\r\n\r\n    if(selectedTiles.length === 1)\r\n    {\r\n        const selectedTile = selectedTiles[0];\r\n        const xDiff = Math.abs(selectedTile.tileGridX - tile.tileGridX);\r\n        const yDiff = Math.abs(selectedTile.tileGridY - tile.tileGridY);\r\n\r\n        if((xDiff === 1 && yDiff === 0) || (xDiff === 0 && yDiff === 1))\r\n        {\r\n            selectedTiles.push(tile);\r\n\r\n            let firstSelectedTile = selectedTiles[0];\r\n            let secondSelectedTile = selectedTiles[1];\r\n\r\n            tileGrid.swapTiles(context, firstSelectedTile, secondSelectedTile);\r\n\r\n            queue.push(() => {\r\n\r\n                // If there are no matches, swap the tiles back\r\n                if(\r\n                    !tileGrid.hasMatches(firstSelectedTile.tileGridX, firstSelectedTile.tileGridY) &&\r\n                    !tileGrid.hasMatches(secondSelectedTile.tileGridX, secondSelectedTile.tileGridY)\r\n                )\r\n                {\r\n                    tileGrid.swapTiles(context, firstSelectedTile, secondSelectedTile);\r\n                }\r\n\r\n                return Promise.resolve();\r\n\r\n            });\r\n\r\n            selectedTiles.forEach((tile) => { tile.deactivate(); });\r\n            selectedTiles = [];\r\n        }\r\n    }\r\n\r\n}","export default class {\r\n\r\n    constructor()\r\n    {\r\n        this.queuedActions = [];\r\n        this.currentAction = null;\r\n    }\r\n\r\n    isActionRunning()\r\n    {\r\n        return this.currentAction != null;\r\n    }\r\n\r\n    hasActions()\r\n    {\r\n        return this.queuedActions.length > 0;\r\n    }\r\n\r\n    next()\r\n    {\r\n        this.currentAction = this.queuedActions.shift();\r\n        this.currentAction();\r\n    }\r\n\r\n    push(action)\r\n    {\r\n        var self = this;\r\n        self.queuedActions.push(() => { action().then(() => { self.currentAction = null; }) });\r\n    }\r\n\r\n}","import { getRandomItem } from './Utility';\r\nimport Tile from './Tile';\r\nimport TileType from './TileType';\r\nimport TileState from './TileState';\r\n\r\nexport default class {\r\n\r\n    constructor(tileWidth, tileHeight, offsetX, offsetY, onTileSelect, queue)\r\n    {\r\n        this.offsetX = offsetX;\r\n        this.offsetY = offsetY;\r\n        this.tileHeight = tileHeight;\r\n        this.tileWidth = tileWidth;\r\n        this.tileGrid = [];\r\n        this.onTileSelect = onTileSelect;\r\n        this.queue = queue;\r\n\r\n        for(let y = 0; y < tileHeight; y++)\r\n        {\r\n            this.tileGrid[y] = [];\r\n            for(let x = 0; x < tileWidth; x++)\r\n            {\r\n                const aboveTile = (y < 1) ? null : this.tileGrid[y - 1][x];\r\n                const leftTile = (x < 1) ? null : this.tileGrid[y][x - 1];\r\n\r\n                const tileType = getRandomItem(TileType.filter(t =>\r\n                    (aboveTile === null || t.name !== aboveTile.tileType.name) &&\r\n                    (leftTile === null || t.name !== leftTile.tileType.name)\r\n                ));\r\n\r\n                this.tileGrid[y][x] = new Tile(tileType, this.offsetX + (50 * x), this.offsetY + (50 * y), x, y, this.onTileSelect);\r\n            }\r\n        }\r\n    }\r\n\r\n    create(context)\r\n    {\r\n        this.forEachTile(tile => tile.create(context));\r\n    }\r\n\r\n    update(context)\r\n    {\r\n        const self = this;\r\n\r\n        // Detect and destroy any matches\r\n        const matchedTiles = self.getMatches();\r\n\r\n        let destroys = [];\r\n        matchedTiles.forEach(t => { destroys.push(t.destroy(context)); });\r\n\r\n        if(destroys.length > 0)\r\n        {\r\n            self.queue.push(() => { return Promise.all(destroys); });\r\n        }\r\n\r\n        // Remove any destroyed tiles\r\n        let bottomEmptyTiles = [];\r\n        self.forEachTile((tile, x, y) => {\r\n\r\n            if(self.tileGrid[y][x].state === TileState.Destroyed)\r\n            {\r\n                self.tileGrid[y][x] = null;\r\n\r\n                // Cache the bottom-most empty tiles\r\n                let otherEmptyTile = bottomEmptyTiles.find(e => e.x === x);\r\n                if(typeof otherEmptyTile === \"undefined\")\r\n                {\r\n                    bottomEmptyTiles.push({ x, y });\r\n                }\r\n                else\r\n                {\r\n                    otherEmptyTile.y = y;\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n        let drops = [];\r\n        bottomEmptyTiles.forEach(({x, y}) => {\r\n\r\n            // First, find the closest tile above this empty tile\r\n            let closestTile = null;\r\n            let closestTileY = y;\r\n\r\n            while(closestTileY > 0)\r\n            {\r\n                closestTile = self.tileGrid[closestTileY][x];\r\n\r\n                if(closestTile != null)\r\n                {\r\n                    break;\r\n                }\r\n\r\n                closestTileY--;\r\n            }\r\n\r\n            // Second, set up that tile and all of the tiles above it for dropping\r\n            if(closestTile != null)\r\n            {\r\n                let currY = y;\r\n                while(closestTileY >= 0)\r\n                {\r\n                    self.tileGrid[currY][x] = closestTile;\r\n                    drops.push(closestTile.updatePosition(context, self.offsetX + (50 * x), self.offsetY + (50 * currY), x, currY));\r\n\r\n                    currY--;\r\n                    closestTileY--;\r\n\r\n                    if(closestTileY >= 0)\r\n                    {\r\n                        closestTile = self.tileGrid[closestTileY][x];\r\n                    }\r\n                }\r\n            }\r\n\r\n        });\r\n\r\n        if(drops.length > 0)\r\n        {\r\n            self.queue.push(() => { return Promise.all(drops); });\r\n        }\r\n\r\n        return;\r\n\r\n\r\n\r\n\r\n\r\n\r\n        /*\r\n        // Identify any tiles that need to drop\r\n        let dropTiles = [];\r\n\r\n        self.forEachTile((tile, x, y) => {\r\n\r\n            if(y < (self.tileHeight - 1))\r\n            {\r\n                // Is the tile below an empty spot?\r\n                const belowTile = self.tileGrid[y + 1][x];\r\n                if(belowTile === null && self.tileGrid[y][x] != null)\r\n                {\r\n                    dropTiles.push({ tile, x, y });\r\n                }\r\n            }\r\n\r\n        });\r\n\r\n        let drops = [];\r\n\r\n        // Now that we've identified all the tiles that need to drop,\r\n        // let's queue all of the tiles in those columns to drop\r\n        dropTiles.forEach(({tile, x, y}) => {\r\n\r\n            let currY = y;\r\n            while(currY >= 0)\r\n            {\r\n                let currTile = self.tileGrid[currY][x];\r\n            \r\n                if(currTile != null)\r\n                {\r\n                    self.tileGrid[currY + 1][x] = currTile;\r\n                    drops.push(currTile.updatePosition(context, self.offsetX + (50 * x), self.offsetY + (50 * (currY + 1)), x, currY + 1));\r\n                }\r\n\r\n                currY--;\r\n            }\r\n\r\n        });\r\n\r\n        if(drops.length > 0)\r\n        {\r\n            self.queue.push(() => { return Promise.all(drops); });\r\n        }\r\n        */\r\n    }\r\n\r\n    swapTiles(context, firstTile, secondTile)\r\n    {\r\n        let self = this;\r\n\r\n        self.queue.push(() => {\r\n            \r\n            let firstTileX = firstTile.x;\r\n            let firstTileY = firstTile.y;\r\n            let firstTileGridX = firstTile.tileGridX;\r\n            let firstTileGridY = firstTile.tileGridY;\r\n    \r\n            let secondTileX = secondTile.x;\r\n            let secondTileY = secondTile.y;\r\n            let secondTileGridX = secondTile.tileGridX;\r\n            let secondTileGridY = secondTile.tileGridY;\r\n    \r\n            let firstSwap = secondTile.updatePosition(context, firstTileX, firstTileY, firstTileGridX, firstTileGridY);\r\n            self.tileGrid[firstTileGridY][firstTileGridX] = secondTile;\r\n    \r\n            let secondSwap = firstTile.updatePosition(context, secondTileX, secondTileY, secondTileGridX, secondTileGridY);\r\n            self.tileGrid[secondTileGridY][secondTileGridX] = firstTile;\r\n\r\n            return Promise.all([firstSwap, secondSwap]);\r\n\r\n        });\r\n    }\r\n\r\n    hasMatches(targetGridX, targetGridY)\r\n    {\r\n        return this.getMatches(targetGridX, targetGridY).length > 0;\r\n    }\r\n\r\n    getMatches(targetGridX, targetGridY)\r\n    {\r\n        const self = this;\r\n        const matchedTiles = [];\r\n\r\n        self.forEachTile((tile, x, y) => {\r\n\r\n            if(\r\n                (typeof targetGridX !== 'undefined' && x !== targetGridX) &&\r\n                (typeof targetGridY !== 'undefined' && y !== targetGridY)\r\n              )\r\n            {\r\n                return;\r\n            }\r\n\r\n            const targetTileType = tile.tileType;\r\n            const matchedXTiles = [];\r\n            const matchedYTiles = [];\r\n\r\n            // Check for matches to the right\r\n            let currX = (x + 1);\r\n            while(currX < self.tileWidth)\r\n            {\r\n                const currTile = self.tileGrid[y][currX];\r\n\r\n                if(currTile != null && targetTileType.name === currTile.tileType.name)\r\n                {\r\n                    matchedXTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currX++;\r\n            }\r\n\r\n            // Check for matches to the left\r\n            currX = (x - 1);\r\n            while(currX > 0)\r\n            {\r\n                const currTile = self.tileGrid[y][currX];\r\n\r\n                if(currTile != null && targetTileType.name === currTile.tileType.name)\r\n                {\r\n                    matchedXTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currX--;\r\n            }\r\n\r\n            // Check matches downwards\r\n            let currY = (y + 1);\r\n            while(currY < self.tileHeight)\r\n            {\r\n                const currTile = self.tileGrid[currY][x];\r\n\r\n                if(currTile != null && targetTileType.name === currTile.tileType.name)\r\n                {\r\n                    matchedYTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currY++;\r\n            }\r\n\r\n            // Check matches upwards\r\n            currY = (y - 1);\r\n            while(currY > 0)\r\n            {\r\n                const currTile = self.tileGrid[currY][x];\r\n\r\n                if(currTile != null && targetTileType === currTile.tileType)\r\n                {\r\n                    matchedYTiles.push(currTile);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n\r\n                currY--;\r\n            }\r\n            \r\n            if(matchedYTiles.length > 1)\r\n            {\r\n                matchedTiles.push(...matchedYTiles);\r\n            }\r\n            \r\n            if(matchedXTiles.length > 1)\r\n            {\r\n                matchedTiles.push(...matchedXTiles);\r\n            }\r\n\r\n            if(matchedYTiles.length > 1 || matchedXTiles.length > 1)\r\n            {\r\n                matchedTiles.push(tile);\r\n            }\r\n        });\r\n\r\n        return matchedTiles;\r\n    }\r\n\r\n    forEachTile(callback)\r\n    {\r\n        for(let y = 0; y < this.tileHeight; y++)\r\n        {\r\n            for(let x = 0; x < this.tileWidth; x++)\r\n            {\r\n                const currTile = this.tileGrid[y][x];\r\n\r\n                if(currTile != null)\r\n                {\r\n                    callback(this.tileGrid[y][x], x, y);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":""}